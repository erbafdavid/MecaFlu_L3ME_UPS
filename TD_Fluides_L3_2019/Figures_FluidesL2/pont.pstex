%!PS-Adobe-2.0 EPSF-2.0
%%Title: pont.pstex
%%Creator: fig2dev Version 3.2 Patchlevel 1a
%%CreationDate: Tue Jan  9 09:59:06 2001
%%For: brancher@lyra.ups-tlse.fr (Pierre BRANCHER,,,,)
%%Orientation: Portrait
%%BoundingBox: 0 0 187 117
%%Pages: 0
%%BeginSetup
%%EndSetup
%%Magnification: 1.0000
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
-27.0 158.0 translate
1 -1 scale
.9 .9 scale % to make patterns same scale as in xfig

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index show		% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proe char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% left45
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 32 true [ 32 0 0 -32 0 32 ]
	{<808080804040404020202020101010100808080804040404
	020202020101010180808080404040402020202010101010
	080808080404040402020202010101018080808040404040
	202020201010101008080808040404040202020201010101
	808080804040404020202020101010100808080804040404
	0202020201010101>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P4 exch def
1.1111 1.1111 scale %restore scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def
%%EndProlog

$F2psBegin
10 setmiterlimit
n -1000 3499 m -1000 -1000 l 4392 -1000 l 4392 3499 l cp clip n
 0.06299 0.06299 sc
% Polyline
7.500 slw
n 2930 1350 m 2927 1351 l 2920 1352 l 2909 1354 l 2891 1358 l 2867 1362 l
 2837 1368 l 2802 1375 l 2764 1383 l 2724 1391 l 2683 1400 l
 2642 1408 l 2603 1417 l 2565 1425 l 2529 1434 l 2496 1442 l
 2465 1450 l 2436 1457 l 2409 1465 l 2384 1473 l 2359 1481 l
 2336 1488 l 2314 1497 l 2293 1505 l 2269 1515 l 2246 1525 l
 2223 1535 l 2200 1546 l 2176 1557 l 2153 1568 l 2128 1580 l
 2104 1591 l 2080 1602 l 2055 1614 l 2030 1625 l 2005 1635 l
 1980 1645 l 1956 1654 l 1932 1662 l 1907 1669 l 1884 1675 l
 1860 1681 l 1837 1685 l 1814 1688 l 1791 1689 l 1768 1690 l
 1746 1689 l 1724 1688 l 1701 1686 l 1677 1682 l 1653 1678 l
 1628 1672 l 1602 1666 l 1575 1659 l 1548 1652 l 1520 1643 l
 1491 1634 l 1462 1625 l 1433 1615 l 1404 1604 l 1375 1594 l
 1346 1583 l 1317 1573 l 1289 1562 l 1262 1552 l 1234 1542 l
 1208 1532 l 1181 1523 l 1155 1514 l 1129 1505 l 1105 1497 l
 1081 1490 l 1057 1482 l 1032 1475 l 1006 1468 l 979 1461 l
 951 1454 l 921 1447 l 890 1439 l 856 1432 l 821 1424 l
 784 1416 l 746 1408 l 707 1400 l 668 1392 l 629 1385 l
 592 1377 l 558 1371 l 528 1365 l 502 1360 l 482 1356 l
 467 1353 l 458 1351 l 452 1350 l 450 1350 l gs col0 s gr 
% Polyline
n 2935 670 m 2932 671 l 2925 672 l 2914 674 l 2896 678 l 2872 682 l
 2842 688 l 2807 695 l 2769 703 l 2729 711 l 2688 720 l
 2647 728 l 2608 737 l 2570 745 l 2534 754 l 2501 762 l
 2470 770 l 2441 777 l 2414 785 l 2389 793 l 2364 801 l
 2341 808 l 2319 817 l 2298 825 l 2274 835 l 2251 845 l
 2228 855 l 2205 866 l 2181 877 l 2158 888 l 2133 900 l
 2109 911 l 2085 922 l 2060 934 l 2035 945 l 2010 955 l
 1985 965 l 1961 974 l 1937 982 l 1912 989 l 1889 995 l
 1865 1001 l 1842 1005 l 1819 1008 l 1796 1009 l 1773 1010 l
 1751 1009 l 1729 1008 l 1706 1006 l 1682 1002 l 1658 998 l
 1633 992 l 1607 986 l 1580 979 l 1553 972 l 1525 963 l
 1496 954 l 1467 945 l 1438 935 l 1409 924 l 1380 914 l
 1351 903 l 1322 893 l 1294 882 l 1267 872 l 1239 862 l
 1213 852 l 1186 843 l 1160 834 l 1134 825 l 1110 817 l
 1086 810 l 1062 802 l 1037 795 l 1011 788 l 984 781 l
 956 774 l 926 767 l 895 759 l 861 752 l 826 744 l
 789 736 l 751 728 l 712 720 l 673 712 l 634 705 l
 597 697 l 563 691 l 533 685 l 507 680 l 487 676 l
 472 673 l 463 671 l 457 670 l 455 670 l gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P4 [16 0 0 -16 30.33 44.67] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 910 1810 m 3380 1810 l 3380 2480 l 910 2480 l cp gs col0 s gr 
% Polyline
 [60] 0 sd
n 1800 1015 m 2030 1450 l 2025 2125 l 1795 1685 l 1795 1020 l cp gs col0 s gr  [] 0 sd
% Polyline
n 455 680 m 455 1355 l gs col0 s gr 
% Polyline
n 2930 675 m 2930 1350 l gs col0 s gr 
% Polyline
 [60] 0 sd
n 2930 1355 m 3380 2475 l gs col0 s gr  [] 0 sd
% Polyline
 [60] 0 sd
n 462 1367 m 912 2487 l gs col0 s gr  [] 0 sd
% Polyline
n 455 675 m 2930 670 l gs col0 s gr 
% Polyline
15.000 slw
gs  clippath
2004 1325 m 2019 1435 l 1938 1360 l 2011 1499 l 2077 1464 l cp
1826 1145 m 1810 1034 l 1892 1110 l 1819 971 l 1753 1006 l cp
clip
n 1800 1015 m 2030 1455 l gs col0 s gr gr

% arrowhead
n 1826 1145 m 1810 1034 l 1892 1110 l  col0 s
% arrowhead
n 2004 1325 m 2019 1435 l 1938 1360 l  col0 s
% Polyline
gs  clippath
893 1663 m 896 1774 l 823 1691 l 881 1837 l 951 1809 l cp
471 810 m 467 698 l 541 782 l 483 636 l 413 664 l cp
clip
n 459 678 m 905 1795 l gs col0 s gr gr

% arrowhead
n 471 810 m 467 698 l 541 782 l  col0 s
% arrowhead
n 893 1663 m 896 1774 l 823 1691 l  col0 s
% Polyline
7.500 slw
 [60] 0 sd
n 900 2470 m 903 2469 l 910 2468 l 921 2466 l 939 2462 l 963 2458 l
 993 2452 l 1028 2445 l 1066 2437 l 1106 2429 l 1147 2420 l
 1188 2412 l 1227 2403 l 1265 2395 l 1301 2386 l 1334 2378 l
 1365 2370 l 1394 2363 l 1421 2355 l 1446 2347 l 1471 2339 l
 1494 2332 l 1516 2323 l 1538 2315 l 1561 2305 l 1584 2295 l
 1607 2285 l 1630 2274 l 1654 2263 l 1677 2252 l 1702 2240 l
 1726 2229 l 1750 2218 l 1775 2206 l 1800 2195 l 1825 2185 l
 1850 2175 l 1874 2166 l 1898 2158 l 1923 2151 l 1946 2145 l
 1970 2139 l 1993 2135 l 2016 2132 l 2039 2131 l 2063 2130 l
 2084 2131 l 2106 2132 l 2129 2134 l 2153 2138 l 2177 2142 l
 2202 2148 l 2228 2154 l 2255 2161 l 2282 2168 l 2310 2177 l
 2339 2186 l 2368 2195 l 2397 2205 l 2426 2216 l 2455 2226 l
 2484 2237 l 2513 2247 l 2541 2258 l 2568 2268 l 2596 2278 l
 2622 2288 l 2649 2297 l 2675 2306 l 2701 2315 l 2725 2323 l
 2749 2330 l 2773 2338 l 2798 2345 l 2824 2352 l 2851 2359 l
 2879 2366 l 2909 2373 l 2940 2381 l 2974 2388 l 3009 2396 l
 3046 2404 l 3084 2412 l 3123 2420 l 3162 2428 l 3201 2435 l
 3238 2443 l 3272 2449 l 3302 2455 l 3328 2460 l 3348 2464 l
 3363 2467 l 3372 2469 l 3378 2470 l 3380 2470 l gs col0 s gr  [] 0 sd
% Polyline
n 900 1800 m 903 1799 l 910 1798 l 921 1796 l 939 1792 l 963 1788 l
 993 1782 l 1028 1775 l 1066 1767 l 1106 1759 l 1147 1750 l
 1188 1742 l 1227 1733 l 1265 1725 l 1301 1716 l 1334 1708 l
 1365 1700 l 1394 1693 l 1421 1685 l 1446 1677 l 1471 1669 l
 1494 1662 l 1516 1653 l 1538 1645 l 1561 1635 l 1584 1625 l
 1607 1615 l 1630 1604 l 1654 1593 l 1677 1582 l 1702 1570 l
 1726 1559 l 1750 1548 l 1775 1536 l 1800 1525 l 1825 1515 l
 1850 1505 l 1874 1496 l 1898 1488 l 1923 1481 l 1946 1475 l
 1970 1469 l 1993 1465 l 2016 1462 l 2039 1461 l 2063 1460 l
 2084 1461 l 2106 1462 l 2129 1464 l 2153 1468 l 2177 1472 l
 2202 1478 l 2228 1484 l 2255 1491 l 2282 1498 l 2310 1507 l
 2339 1516 l 2368 1525 l 2397 1535 l 2426 1546 l 2455 1556 l
 2484 1567 l 2513 1577 l 2541 1588 l 2568 1598 l 2596 1608 l
 2622 1618 l 2649 1627 l 2675 1636 l 2701 1645 l 2725 1653 l
 2749 1660 l 2773 1668 l 2798 1675 l 2824 1682 l 2851 1689 l
 2879 1696 l 2909 1703 l 2940 1711 l 2974 1718 l 3009 1726 l
 3046 1734 l 3084 1742 l 3123 1750 l 3162 1758 l 3201 1765 l
 3238 1773 l 3272 1779 l 3302 1785 l 3328 1790 l 3348 1794 l
 3363 1797 l 3372 1799 l 3378 1800 l 3380 1800 l gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P4 [16 0 0 -16 60.00 97.33] PATmp PATsp ef gr PATusp gs col0 s gr 
$F2psEnd
rs
end
