%!PS-Adobe-2.0
%%Creator: dvips(k) 5.85 Copyright 1999 Radical Eye Software
%%Title: solutions.dvi
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips solutions.dvi -o solutions.ps
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 1999.10.05:1652
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 39158280 55380996 1000 600 600 (solutions.dvi)
@start
%DVIPSBitmapFont: Fa cmsy7 7 1
/Fa 1 1 df<B712FEA327037A8F34>0 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmmi5 5 2
/Fb 2 115 df<131EEB7F80EBE1C0EA01C1380380E0EA0700120E121E121C123CA2EA38
011278EA7FFFA2B512C0EAF003A21480130700E013005B130E6C5A12705BEA38F0EA1FC0
6C5A131D7C9C1C>18 D<380F07E0383F8FF83833D81CEA63F038C3E03CEBC07C12031438
38078000A448C7FCA4121E120C16127D911C>114 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmr5 5 2
/Fc 2 51 df<1360EA01E0120F12FF12F11201B3A3387FFF80A2111C7B9B1C>49
D<EA03FCEA0FFF383C0FC0387003E0387801F0EAFC0014F8A214781278C712F814F0A2EB
01E0EB03C0EB0780EB0F00131C5B13E03801C018EA0380EA0600481338383FFFF05AB5FC
A2151C7D9B1C>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmr7 7 2
/Fd 2 51 df<13381378EA01F8121F12FE12E01200B3AB487EB512F8A215267BA521>49
D<13FF000313E0380E03F0381800F848137C48137E00787F12FC6CEB1F80A4127CC7FC15
005C143E147E147C5C495A495A5C495A010EC7FC5B5B903870018013E0EA018039030003
0012065A001FB5FC5A485BB5FCA219267DA521>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe cmex10 10 11
/Fe 11 115 df<1430147014E0EB01C01303EB0780EB0F00A2131E5BA25B13F85B12015B
1203A2485AA3485AA3121F90C7FCA25AA3123EA2127EA6127C12FCB3A2127C127EA6123E
A2123FA37EA27F120FA36C7EA36C7EA212017F12007F13787FA27F7FA2EB0780EB03C013
01EB00E0147014301462738226>0 D<12C07E12707E123C7E7EA26C7E6C7EA26C7E7F12
007F1378137CA27FA37FA31480130FA214C0A31307A214E0A6130314F0B3A214E01307A6
14C0A2130FA31480A2131F1400A3133EA35BA2137813F85B12015B485AA2485A48C7FCA2
121E5A12385A5A5A14627C8226>I<151E153E157C15F8EC01F0EC03E01407EC0FC0EC1F
8015005C147E5CA2495A495AA2495AA2495AA2495AA249C7FCA2137EA213FE5B12015BA2
12035BA21207A25B120FA35B121FA45B123FA548C8FCA912FEB3A8127FA96C7EA5121F7F
A4120F7FA312077FA21203A27F1201A27F12007F137EA27FA26D7EA26D7EA26D7EA26D7E
A26D7E6D7EA2147E80801580EC0FC0EC07E01403EC01F0EC00F8157C153E151E1F947182
32>16 D<12F07E127C7E7E6C7E7F6C7E6C7E12017F6C7E137EA27F6D7EA26D7EA26D7EA2
6D7EA26D7EA26D7EA280147E147F80A21580141FA215C0A2140F15E0A3140715F0A41403
15F8A5EC01FCA9EC00FEB3A8EC01FCA9EC03F8A515F01407A415E0140FA315C0141FA215
80A2143F1500A25C147E14FE5CA2495AA2495AA2495AA2495AA2495AA249C7FC137EA25B
485A5B1203485A485A5B48C8FC123E5A5A5A1F947D8232>I<160F161F163E167C16F8ED
01F0ED03E0ED07C0150FED1F801600153E157E5D4A5A5D14034A5A5D140F4A5AA24AC7FC
143E147E5CA2495AA2495AA2495AA2130F5CA2495AA2133F91C8FCA25B137E13FEA25B12
01A25B1203A35B1207A35B120FA35BA2121FA45B123FA690C9FC5AAA12FEB3AC127FAA7E
7FA6121F7FA4120FA27FA312077FA312037FA312017FA212007FA2137E137F7FA280131F
A26D7EA2801307A26D7EA26D7EA26D7EA2147E143E143F6E7EA26E7E1407816E7E140181
6E7E157E153E811680ED0FC01507ED03E0ED01F0ED00F8167C163E161F160F28C66E823D
>I<12F07E127C7E7E6C7E6C7E6C7E7F6C7E1200137C137E7F6D7E130F806D7E1303806D
7EA26D7E147C147E80A26E7EA26E7EA26E7EA2811403A26E7EA2811400A281157E157FA2
811680A2151F16C0A3150F16E0A3150716F0A31503A216F8A4150116FCA6150016FEAA16
7FB3AC16FEAA16FC1501A616F81503A416F0A21507A316E0150FA316C0151FA31680153F
A216005DA2157E15FE5DA214015DA24A5AA214075DA24A5AA24A5AA24AC7FCA2147E147C
14FC495AA2495A5C1307495A5C131F49C8FC137E137C5B1201485A5B485A485A48C9FC12
3E5A5A5A28C67E823D>I<B512F8A500F8C7FCB3B3B3B3B3B3B3B3B3B3A8B512F8A515C6
6B822C>I<B512F8A5C7FCB3B3B3B3B3B3B3B3B3B3A8B5FCA515C67F822C>I<B512E0A500
F8C7FCB3B3B3B3B3B3B3ACB512E0A513946E8227>104 D<B512E0A5EA0003B3B3B3B3B3
B3B3ACB5FCA513947F8227>I<1B301B78A21BF8A21BF0A21A01A21BE0A21A03A21BC0A3
1A07A21B80A21A0FA21B00A262A21A1EA21A3EA21A3CA21A7CA21A78A21AF8A262A31901
A262A21903A262A21907A262A2190FA297C7FCA261A2191EA2193EA2193CA3197CA21978
A219F8A261A21801A261A21803A261A21807A261A2180FA296C8FCA360A2181EA2183EA2
183CA2187C131018781330017016F8A201F85E120117011203486C5EA2120D001D160312
19D830FE5E12700060160712C000405FEA007F170FA295C9FC6D7E5FA2171EA26D6C143E
A2173CA2177C6D7E1778A36D6C14F8A25FA216016D7E5FA21603A26D6C5CA21607A26D6C
5CA2160FA294CAFC147F5EA2161EEC3F80A2163EA2163CEC1FC0167CA21678A291380FE0
F8A25EA2EC07F1A25EA215F3EC03FB5EA215FFA26E5BA48093CBFCA4157EA4157C153C15
384DC8788353>114 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff cmsy6 6 1
/Ff 1 1 df<B712C0A322037A8D30>0 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg cmr6 6 10
/Fg 10 116 df<EB07FC90387FFFC03901FC07F03907E000FC4848137E48487F48C7EA1F
80007EEC0FC0A248EC07E0A7007EEC0FC0A2003E1580003F141F6C15006D5B000F143E00
07143C6C6C5BA2D8C1E0EBF06000C014E0006015C0016013C0EB7001D87FF013FFA2003F
1580A223237CA22B>10 D<130C1338137013E0EA01C0EA038013005A120EA25AA25AA312
781270A312F0AB1270A312781238A37EA27EA27E7E1380EA01C0EA00E013701338130C0E
317AA418>40 D<12C012707E7E7E7E7E1380EA01C0A2EA00E0A21370A313781338A3133C
AB1338A313781370A313E0A2EA01C0A2EA038013005A120E5A5A5A12C00E317CA418>I<
13FF000313C0380781E0380F00F0001E137848133CA248131EA400F8131FAD0078131EA2
007C133E003C133CA26C13786C13F0380781E03803FFC0C6130018227DA01E>48
D<13E01201120712FF12F91201B3A7487EB512C0A212217AA01E>I<EA01FC3807FF8038
1C0FC0383003E0386001F0EB00F812F86C13FCA2147C1278003013FCC7FC14F8A2EB01F0
EB03E014C0EB0780EB0F00131E13385B5B3801C00CEA0380380600185A5A383FFFF85AB5
12F0A216217CA01E>I<B712FEA3CAFCA9B712FEA3270F7C932F>61
D<137F3803FFE03807C0F0380F0078001E13F85AA2007C13700078130012F8A7127C1418
123C6C13306C13603807C0E03803FF8038007E0015187D961B>99
D<137E3803FFC0380781E0380F00F0001E137848133CA248131EA200F8131FA70078131E
007C133E003C133C003E137C6C13F8380F81F03803FFC0C6130018187D961E>111
D<3807F080EA1FFFEA380FEA700312E01301A212F06CC7FCEA7FC0EA3FF8EA1FFEEA07FF
38001F80EB07C0EAC003130112E0A200F01380130338FC0F00EACFFEEA83F812187D9618
>115 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh cmsy10 10 3
/Fh 3 113 df<007FB81280B912C0A26C17803204799641>0 D<EE0180EE03C01607A2EE
0F80A2EE1F00A2163EA25EA25EA24B5AA24B5AA24B5A150F5E4BC7FCA2153EA25DA25DA2
4A5AA24A5AA24A5AA24A5AA24AC8FCA2143EA25CA25CA2495AA2495AA2495AA2495AA249
C9FCA2133EA25B13FC5B485AA2485AA2485AA2485AA248CAFCA2123EA25AA25AA25A1260
2A4E75BB00>54 D<F10180F103C01907A2F10F80A2F11F00A2193EA261A261A24E5AA24E
5AA24E5AA24E5AA296C7FC60A2183EA260A260A24D5AA24D5AA24D5AA24D5AA24DC8FCA2
0130153E13F000015EEA07F8000F5E487E00794B5AEAE1FE00C04B5AC67E6D4A5AA26E49
5A133F6E49C9FC131F6E133E130F6E5B13076E1378010314F8A26E485A13016E485A1300
6E485A147FED8F80143F039FCAFC15DFEC1FFEA26E5AA26E5AA26E5AA26E5A5D42547B83
45>112 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi cmmi7 7 9
/Fi 9 122 df<EB07F8EB1FFF01381380EB303FEC1F00140691C7FC1338133CA27F131F
6D7E806D7EA2EB3FF0EB7BF8EA01E13803C1FCEA0780EA0F00001E137C003E137E123C00
7C137CA25AA4481378A214F85CA2387801E05C6C485A6C48C7FCEA0FFE6C5A192A7DA81E
>14 D<EB01E0EB07F8EB1E1C133CEB780E1370EBE00F1201EA03C0A2EA0780A2EA0F00A2
48131F121E123EA348133E387FFFFEA2387C003E48137CA3147814F84813F0A2EB01E0A2
EB03C0A2EB07801400EA700E131E6C5A5BEA1FE0EA0780182A7CA820>18
D<EC0180140314071500A25C140E141E141CA2143C143814781470A214F05CA213015C13
035CA2130791C7FC5B130EA2131E131C133C1338A21378137013F05BA212015B12035BA2
120790C8FCA25A120E121E121CA2123C123812781270A212F05AA2193B7CAB22>61
D<4AB4FC021F13E091387E01F8903901F0007ED907C0131F4948EB0F80011EC7EA07C013
7C49EC03E0485AEE01F0485A485A120F4915F8121F90C8FC5A17F0007E1503A4EE07E05A
EE0FC0A2EE1F80A2007CED3F00007E153E167E003E5D4B5A6C4A5A6DEB07C0000F4A5A6C
6C013FC7FCD803F013FC3900FC03F090383FFFC0D907FCC8FC2D2A7DA832>79
D<EB1F80EB7FC0EBF0E73803C03FEA078048487EA2121E003E133E123C127CA2485BA448
5B1530A3903801F060A2EA7803010E13C0393C1CF980381FF07F3907C01E001C1B7C9924
>97 D<EB0FC0EB7FF0EBF0383803C01CEA0780EA0F005A121E003E1338481370EB07E038
7FFF8038FFFC0000F8C7FCA45AA214040078130C141800381330003C13E0381E07C0380F
FF00EA03F8161B7C991F>101 D<131C133EA25BA45BA4485AB512E0A23801F000485AA4
485AA4485AA448C7FC1460A214C0123EEB0180EB0300EA1E06EA1F1CEA0FF8EA03E01326
7EA419>116 D<90387C03C03901FF0FF03907079C30390E03B078000CEBF0F8001813E1
123015F0396007C0E015001200A2495AA449C7FC15301238007C1460EAFC3E15C0EAF87E
39F06F03803970C70700383F83FE381F01F81D1B7D9926>120 D<EA03E0486C1370D80C
7813F8EA187C0030EB01F0A2126013F800C0EB03E0A2EA01F0A2EC07C0EA03E0A33907C0
0F80A4EC1F00A25C00035B3801E0FE3800FFBEEB3F3E13005C121E003F5B5C387E01E038
3C03C038300780D81C1FC7FCEA0FFCEA07F01D267D9922>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fj cmmi10 10 30
/Fj 30 127 df<EC3FC0ECFFF8903807E07C90380F801FD93F00EB800C017E130F499038
07C01C4848ECE018485A484801031338000FEDF0305B001F16704848156017E0007F16C0
90C713F1178016F34816004815F716FE5EA2485D5EA4007E1407150F003E91381DF81800
3F14796C02E11338270F8007C013303B07E03F007CF02601FFF8EB3FC026003FC0EB0F80
2E267DA435>11 D<1403EC3FF891387FFF80D901E313C014800103133F9138001F80ED07
0092C7FC80A280A2808013018080130080147F81143F8149B47E130790380F8FF0EB3E0F
496C7E13F83801F003D803E07F1207380FC0011380121FEA3F0014005A127EA212FE5D48
1301A35DA24813035D6C13075D127C4A5A6C91C7FC5C6C133E6C6C5A3807C0F03801FFE0
D8003FC8FC223D7DBB25>14 D<EC03F0EC0FFCEC3E1EEC780F14F001011480903803E007
D907C013C0EB0F80131F14004914E0137EA25BA2485A1203A249130F1207A2485AA2ED1F
C0121F5BA290B6FC481580A3903880007F007F150090C7FCA215FEA2127E4A5AA200FE5C
1403A2007C5C4A5AA24A5AA24A5A92C7FC5C6C137E147C001E5B495A6C485A380787806C
B4C8FCEA00F8233C7EBA27>18 D<EB0380D907E01307010FEC0F80161F5CA2011F143FA2
4A1400A2013F5CA291C7127EA24914FEA2017E5CA201FE1301A2495CA200011403A249EC
F018A2000314071738EEE030150F00071670031F1360153F6D017713E0486C9038E3E1C0
903AFF03C1F380903ACFFF00FF00D9C3FC133ED81FC0C9FCA25BA2123FA290CAFCA25AA2
127EA212FEA25AA212702D377EA432>22 D<017E1438D83FFE147E16FEA2D801FC14FC12
000001140116F85BED03F0120315074914E0150F000715C0ED1F805BED3F00000F147EA2
495B4A5A001F495A5D49485A4A5A003F49C7FC143EEB00F8495A48485AEB0F80D87E3EC8
FC13F8EAFFE0138000F8C9FC27257CA429>I<15FE913803FF8091380F83E091383E01F0
91387C00F85C494813FC0103147C4948137E5C130F495AA249C7FC16FE5B137EA2150113
FE4914FCA20001140316F85BED07F01203ED0FE04914C0151F000715806DEB3F00157E6D
5B390FEE01F09038E707E09038C3FF80D9C0FCC7FC001F90C8FCA25BA2123FA290C9FCA2
5AA2127EA212FEA25AA2127027377EA42B>26 D<0140151E01E0153F00015E484816805B
120790C9123F000E161F170F5A1707481700A2003014C014010070010314061260A2170E
00E04948130C5A171C92C7FC5FA26C495C4A14F04A7E6C017F495A4A6C485A3AF801F7E0
0F3BFE0FF3F83F80267FFFE3B5FC02C191C7FC6C01815B02005BD80FFCEB7FF0D803F0EB
0FC031267FA434>33 D<121C127FEAFF80A213C0A3127F121C1200A412011380A2120313
005A1206120E5A5A5A12600A19798817>59 D<150C151E153EA2153C157CA2157815F8A2
15F01401A215E01403A215C01407A21580140FA215005CA2141E143EA2143C147CA21478
14F8A25C1301A25C1303A2495AA25C130FA291C7FC5BA2131E133EA2133C137CA2137813
F8A25B1201A25B1203A25B1207A25B120FA290C8FC5AA2121E123EA2123C127CA2127812
F8A25A12601F537BBD2A>61 D<EC03FC91381FFF80027F7F903901F807F0903903C001F8
90390780007C91C7127E010E804980011F1580D93FC0130F17C01607A24A14E0A2011EC7
FC90C8FCA5EC0FF0ECFFFC903803F00E903907C0078F90381F8001D93E0013CF49130048
4814FF0003ED7FC05B485A120F48481580A2485AA2007F160090C8FC167E16FE5A485D15
015E1503485D15075E4B5AA2007E4A5A4BC7FC003E147E003F5C6C6C485A390FC007F039
07F01FC06CB5C8FCC613FCEB1FE02B3E7DBB2C>64 D<1760177017F01601A21603A21607
160FA24C7EA216331673166316C3A2ED0183A2ED0303150683150C160115181530A21560
A215C014011580DA03007FA202061300140E140C5C021FB5FC5CA20260C7FC5C83495A83
49C8FC1306A25BA25B13385B01F01680487E000716FFB56C013F13FF5EA2383C7DBB3E>
I<0103B77E4916F018FC903B0007F80003FE4BEB00FFF07F80020FED3FC0181F4B15E0A2
141FA25DA2143F19C04B143F1980027F157F190092C812FE4D5A4A4A5AEF0FF04AEC1FC0
05FFC7FC49B612FC5F02FCC7B4FCEF3FC00103ED0FE0717E5C717E1307844A1401A2130F
17035CA2131F4D5A5C4D5A133F4D5A4A4A5A4D5A017F4BC7FC4C5A91C7EA07FC49EC3FF0
B812C094C8FC16F83B397DB83F>I<9339FF8001C0030F13E0037F9038F80380913A01FF
807E07913A07F8000F0FDA1FE0EB079FDA3F80903803BF0002FFC76CB4FCD901FC80495A
4948157E495A495A4948153E017F163C49C9FC5B1201484816385B1207485A1830121F49
93C7FCA2485AA3127F5BA312FF90CCFCA41703A25F1706A26C160E170C171C5F6C7E5F00
1F5E6D4A5A6C6C4A5A16076C6C020EC8FC6C6C143C6C6C5C6CB4495A90393FE00FC0010F
B5C9FC010313FC9038007FC03A3D7CBA3B>I<0103B500F8903807FFFC5BA290260007F8
C813804BEDFC0019F0020F4B5AF003804B4AC7FC180E021F1538604B5CEF0380023F4AC8
FC170E4B133C1770027F5C4C5ADB0007C9FC160E4A5B167E4A13FE4B7E01015B92380E7F
80ECFC1CED383F010301E07FECFDC04A486C7EECFF00D907FC6D7E5C4A130783130F707E
5C1601011F81A24A6D7EA2013F6F7EA24A143F84137F717E91C8123F496C81B60107B512
C0A26146397DB847>75 D<0103B7FC4916E018F8903B0007F80007FC4BEB00FE187F020F
ED3F80F01FC05DA2021F16E0A25DA2143FF03FC05DA2027FED7F80A292C8130018FE4A4A
5A604AEC07F04D5A0101ED3FC04CB4C7FC91B612FC17E0D903FCCAFCA25CA21307A25CA2
130FA25CA2131FA25CA2133FA25CA2137FA291CBFC497EB6FCA33B397DB835>80
D<0103B612F849EDFF8018E0903B0007F8001FF84BEB03FCEF00FE020F157FA24BEC3F80
A2021F16C0A25DA2143FF07F805DA2027FEDFF006092C7485A4D5A4A4A5A4D5A4AEC1F80
057FC7FC0101EC07F891B612E094C8FC9139FC000FC00103EC03F0707E4A6D7E83130717
7E5C177F010F5D5F5CA2011F1401A25CA2133F16034A4A1360A2017F17E019C091C71401
496C01011480B61503933900FE0700EF7E0ECAEA1FFCEF07F03B3B7DB83F>82
D<003FB56C48B51280485DA226007F80C7381FF00091C8EA07C0604993C7FCA2491506A2
0001160E170C5BA20003161C17185BA20007163817305BA2000F167017605BA2001F16E0
5F5BA2003F15015F5BA2007F150394C8FC90C8FCA25E4815065A160E160C161C16181638
5E127E5E4B5A6C4A5A4BC9FC6C6C131E6C6C5B6C6C13F83903F807E06CB55A6C6C48CAFC
EB0FF0393B7BB839>85 D<163FED1FFFA3ED007F167EA216FEA216FCA21501A216F8A215
03A216F0A21507A2027E13E0903803FF8790380FC1CF90381F00EF017EEB7FC049133F48
5A4848131F000715805B000F143F485A1600485A5D127F90C7127EA215FE5A485CA21401
A248ECF80CA21403161CEDF0181407007C1538007E010F1330003E131F027B13706C01E1
13E03A0F83C0F9C03A03FF007F80D800FCEB1F00283B7DB92B>100
D<EC3FC0903801FFF0903807E07890381F801C90387E001E49130E485A485A1207485A49
131E001F141C153C484813F8EC03E0007FEB3FC09038FFFE0014E090C8FC5A5AA7007E14
0315071506003E140E153C6C14706C6C13E0EC07C03903E03F003801FFF838003FC02026
7DA427>I<EC07E0EC1FF891387C1C38903901F80EFC903803F007903807E003EB0FC090
381F8001D93F0013F85B017E130313FE16F0485A150712034914E0A2150F12074914C0A2
151FA2491480A2153FA2160000035C6D5B00015B4A5A3900F8077E90387C1EFEEB1FF890
3807E0FC90C7FC1401A25DA21403001E5C123F387F80075D00FF495A49485A4849C7FC00
7C137E383C01F8381FFFE0000390C8FC26367FA428>103 D<EB03F0EA01FFA3EA00075C
A3130F5CA3131F5CA3133F91C9FCA35B90387E03F8EC0FFF91383C0F809039FEF007C0D9
FDC07FEBFF80EC0003485A5BA249130712035BA2150F00075D5BA2151F000F5D5B153F93
C7FC121F4990387F0180157EEDFE03003F02FC130090C7FC5EEDF80648150E007E150C16
1C5E00FEEC787048EC3FE00038EC0F80293B7CB930>I<90390F8003F090391FE00FFC90
3939F03C1F903A70F8700F80903AE0FDE007C09038C0FF80030013E00001491303018015
F05CEA038113015CA2D800031407A25CA20107140FA24A14E0A2010F141F17C05CEE3F80
131FEE7F004A137E16FE013F5C6E485A4B5A6E485A90397F700F80DA383FC7FC90387E1F
FCEC07E001FEC9FCA25BA21201A25BA21203A25B1207B512C0A32C3583A42A>112
D<3903E001F83907F807FE390E3C1E07391C3E381F3A183F703F800038EBE07F0030EBC0
FF00705B00601500EC007E153CD8E07F90C7FCEAC07EA2120013FE5BA312015BA312035B
A312075BA3120F5BA3121F5B0007C9FC21267EA425>114 D<EB01C0497E1307A4130F5C
A3131F5CA3133F91C7FC007FB51280A2B6FCD8007EC7FCA313FE5BA312015BA312035BA3
12075BA3120FEBC006A2140E001F130CEB801C141814385C146014E0380F81C038078780
D803FEC7FCEA00F819357EB31E>116 D<13F8D803FE1438D8070F147C000E6D13FC121C
1218003814011230D8701F5C12601503EAE03F00C001005B5BD8007E1307A201FE5C5B15
0F1201495CA2151F120349EC80C0A2153F1681EE0180A2ED7F0303FF130012014A5B3A00
F8079F0E90397C0E0F1C90393FFC07F8903907F001F02A267EA430>I<01F8EB03C0D803
FEEB07E0D8070F130F000E018013F0121C12180038140700301403D8701F130112601500
D8E03F14E000C090C7FC5BEA007E16C013FE5B1501000115805B150316001203495B1506
150E150C151C151815385D00015C6D485A6C6C485AD97E0FC7FCEB1FFEEB07F024267EA4
28>I<903907E001F090391FF807FC9039783E0E0F9039E01F1C1FD801C09038383F803A
03800FF07F0100EBE0FF5A000E4A1300000C157E021F133C001C4AC7FC1218A2C7123FA2
92C8FCA25CA2147EA214FEA24A130CA20101141C001E1518003F5BD87F81143801835C00
FF1560010714E03AFE0E7C01C0D87C1C495A2778383E0FC7FC391FF00FFC3907C003F029
267EA42F>120 D<13F8D803FE1470D8070F14F8000EEB8001121C121800381403003015
F0EA701F1260013F130700E0010013E012C05BD8007E130F16C013FE5B151F000115805B
A2153F000315005BA25D157EA315FE5D1401000113033800F80790387C1FF8EB3FF9EB0F
E1EB00035DA2000E1307D83F805B007F495AA24A5A92C7FCEB003E007C5B00705B6C485A
381E07C06CB4C8FCEA01FC25367EA429>I<D901E01360D90FF813E0496C13C090383FFE
0190397FFF038090B5EA07009038F81FFF3901E003FE9038C0001C495B5DC85A4A5A4A5A
4AC7FC140E5C5C14F0495AEB038049C8FC130E5B4913035B495B484813064848130E48C7
5AD80FFC137C391FFF81F8381E0FFFD838075B486C5B00605CD8E00190C7FC38C0007C23
267DA427>I<1504151E151FA2ED0F8016C0ED07E0007FB612F0B712F8A26C15F0C8EA1F
C0ED3F00157E5D5D5D1560251271BB2A>126 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fk cmr8 8 3
/Fk 3 49 df<13031307130E131C1338137013F0EA01E013C01203EA0780A2EA0F00A212
1EA35AA45AA512F8A25AAB7EA21278A57EA47EA37EA2EA0780A2EA03C0120113E0EA00F0
13701338131C130E1307130310437AB11B>40 D<12C07E12707E7E7E120FEA0780120313
C0EA01E0A2EA00F0A21378A3133CA4131EA5131FA2130FAB131FA2131EA5133CA41378A3
13F0A2EA01E0A2EA03C013801207EA0F00120E5A5A5A5A5A10437CB11B>I<EB3FC0EBFF
F03803E07C48487E48487E497E001EEB0780A2003E14C0A248EB03E0A500FC14F0B0007C
14E0A3007E1307003E14C0A36CEB0F806C14006D5A3807C03E3803F0FC3800FFF0EB3FC0
1C2D7DAB23>48 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fl cmmi6 6 12
/Fl 12 127 df<EB03E0EB0FF0EB1C38EB383CEB701CEBE01E1201EA03C0A2EA0780120F
13005AA2001E133E123EA2383FFFFE4813FCA2387C007C1478007813F812F814F0130114
E0A2387803C0A2EB07801400EA380E5B6C5AEA0FF0EA07C017257EA31D>18
D<150E0007141F1206120E48140F121848140714C0D8600113061303A3EC800CEAE007EC
0018153838F00F8039701FC0F0007FB512E001F913C0EA3FF1D81FE01300380F803E2017
7E9527>33 D<D9FFFEEB1FFC163FD907C0EB0FC017004948131C163016E0ED018090261F
0007C7FC150E15385D013E13C0EC03804A7EEC1FE0EB7C3BECE3F0EB7DC190387F01F8EB
FE0001F87F157C157E4848133E153F816F7E485A6F7E821207D8FFFEEB3FFEA22E227CA1
33>75 D<90B512FCEDFF80903907C00FC0ED03F090380F800116F81500A290381F0001A3
ED03F0013E14E0ED07C0ED1F80ED7E0090387FFFF815E090387C01F0EC007849137C153C
153EA24848137EA448485BEDFE06A20007EC7E0CD8FFFE1418ED3FF0C8EA07E027237CA1
2E>82 D<D8FFFEEBFFF0A2D807C0EB0F00150E4848130CA448C75AA4003E5CA4485CA448
5CA448495AA24AC7FCA2140600785B5C6C1370381F03C03807FF80D801FCC8FC24237AA1
2A>85 D<131FEBFF8C3801E0DE3803807E3807007C48133C121E123E003C5B127CA3485B
A215401560903801E0C012781303393807E180391C1CF300380FF87F3807E03C1B177E95
22>97 D<EB1F80EBFFE03803E07038078030EA1F00123E123C007C1360387807C0B51280
EBF80000F8C7FC5AA41408141800781370003813E0381E07C0380FFF00EA03F815177D95
1D>101 D<380F01F0381FC7F83831CE1CEA61F8EBF03C00C1137C13E014383803C000A4
485AA448C7FCA4121EA2120C16177D951D>114 D<133013785BA4485AA4485AB51280A2
3803C000485AA448C7FCA4121EA25B1480383C03001306A25BEA1C38EA0FF0EA07C01121
7D9F18>116 D<3801F01E3907FC7F80390E1CE1C038180F8100301383007013071260EC
0380D8001EC7FCA45BA21580003014C0397878018012F8EC030038F0FC0638E19C1C387F
0FF8381E03E01A177D9523>120 D<EA07C0380FE0033918F0078012300060EB0F0012C0
A2EAC1E00001131EEA03C0A348485AA45CA214F813813803C3F0EA01FFEA00FC1300495A
121E383E03C05CD83C07C7FCEA300EEA383CEA1FF8EA07C019217D9520>I<1460147014
78143CB512FE14FF14FEC712F8EB01F014C01480180B75A320>126
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fm cmmi8 8 13
/Fm 13 127 df<EB01FCEB0FFF90383F07C090387C03E03A01F801F00CEA03F03907E000
F84848141C49EBFC18001F147C48C713381630481570007E156016E016C000FE147D48EC
7F801600157EA2157CA2127C15FE0203130C6CEB073E6C011E131C3A0F81F81F383A03FF
E00FF03A00FE0003C0261F7D9D2D>11 D<013FB6FC17E0903A00FE0007F0EE01FC4AEB00
7EA2010181A25C1880010316005F5CA2010715FEA24A5C4C5A010F4A5A4C5A4AEB1F8004
FFC7FC91B512F84914C00280C9FCA3133F91CAFCA35B137EA313FE5BA312015BA21203B5
12E0A2312D7DAC2D>80 D<013FB512F816FF903A00FE001FC0EE07E04A6D7E707E01016E
7EA24A80A213034C5A5CA201074A5A5F4A495A4C5A010F4A5A047EC7FC9138C003F891B5
12E04991C8FC9138C007C04A6C7E6F7E013F80150091C77EA2491301A2017E5CA201FE13
03A25BA20001EE038018005B5F0003913801FC0EB5D8E000133CEE7FF0C9EA0FC0312E7C
AC35>82 D<3B7FFFF801FFFEA2D801FCC7EA0FC0178049EC070016060003150E160C5BA2
0007151C16185BA2000F153816305BA2001F157016605BA2003F15E05E90C8FCA2481401
5E127EA2150300FE92C7FC5A5D1506150E007C5C151815386C5C5D6CEB03C0260F800FC8
FC3803E03C3801FFF038003FC02F2E7BAC30>85 D<EB03F8EB0FFE90383E0780EBF803D8
01F013C03803E001EA07C0000F1303D81F8013801407393F000F00141E387F01FCEBFFF0
91C7FC007EC8FC12FE5AA4127C156015E0EC01C06CEB0380EC0F006C131C380F81F83803
FFE0C648C7FC1B1F7D9D21>101 D<14FCEB03FF90380F839C90381F01BC013E13FCEB7C
005B1201485A15F8485A1401120F01C013F0A21403121F018013E0A21407A215C0A2000F
130F141F0007EB3F80EBC07F3803E1FF3800FF9F90383E1F0013005CA2143EA2147E0038
137C00FC13FC5C495A38F807E038F00F80D87FFEC7FCEA1FF81E2C7E9D22>103
D<131FEA03FFA2EA003FA2133EA2137EA2137CA213FCA25BA21201143F9038F1FFC09038
F3C1F03803FF0001FC7F5BA2485A5BA25B000F13015D1380A2001F13035D1300140748EC
C04016C0003E130F1580007E148191381F0180007C1403ED070000FCEB0F06151E48EB07
F80070EB01E0222F7DAD29>I<3807C01F390FF07FC0391CF8E0E0383879C138307B8738
707F07EA607E13FC00E0EB03804848C7FCA2128112015BA21203A25BA21207A25BA2120F
A25BA2121FA290C8FC120E1B1F7E9D20>114 D<130E131FA25BA2133EA2137EA2137CA2
13FCA2B512F8A23801F800A25BA21203A25BA21207A25BA2120FA25BA2001F1310143013
001470146014E0381E01C0EB0380381F0700EA0F0EEA07FCEA01F0152B7EA919>116
D<EA01E0D807F8130ED80E3C131FD81C3E5B0038143E12301270D8607E137ED8E07C137C
12C013FC484813FC00005C12015B140100035C13E0A2020313200007ECE06013C0A216E0
020713C00003EB0FC09038E01FC191383BE1803901F071E33A007FE0FF0090381F803C23
1F7E9D29>I<013F137C9038FFC1FF3A01C1E383803A0380F703C0390700F60F000E13FE
4813FC12180038EC0700003049C7FCA2EA200100005BA313035CA301075B5D14C000385C
D87C0F130600FC140E011F130C011B131C39F03BE038D8707113F0393FE0FFC0260F803F
C7FC221F7E9D28>120 D<EA01E0D807F8130ED80E3C131FD81C3E133F0038143E123012
70D8607E137ED8E07C137C12C013FC484813FC000014F812015B1401000314F013E0A214
03000714E013C0A2140715C00003130FEBE01F143F3901F07F8038007FEFEB1F8FEB001F
1500A2003E133EA2007E5B5C387C01F0387003E0383007C0383C0F80D80FFEC7FCEA03F0
202C7E9D23>I<15C0EC01E0140015F01570007FB512FCB6FC7EC7EA01F0EC03E0EC0780
150014061E0D74AE23>126 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fn cmr10 10 44
/Fn 44 122 df<EC0FFE91387FFFC0903903FC07F890390FE000FED93F80EB3F8049C76C
7E01FE6E7E48486E7E00038248486E7E48486E7EA248486E7E003F1780A34848ED7FC0AA
003F17806D15FFA2001F1700A36C6C4A5AA200075E6D140300035E00015EA26C6C4A5AA2
017C5DA26D4A5A011E92C7FC00C017606D141E006017C06D141CA326700380EB38010038
EE0380D83FFFEC3FFFA46C1700A2333B7CBA3C>10 D<127812FCA27E7EEA7F80121FEA0F
C0EA07E0EA03F012001378133C131E13060F0F77B92A>18 D<133C137EA213FE1201EA03
FC13F0EA07E0EA0FC0EA1F80EA1E005A5A5A12C00F0F6FB92A>I<001C131C007F137F39
FF80FF80A26D13C0A3007F137F001C131C00001300A40001130101801380A20003130301
001300485B00061306000E130E485B485B485B006013601A197DB92A>34
D<121C127FEAFF80A213C0A3127F121C1200A412011380A2120313005A1206120E5A5A5A
12600A1979B917>39 D<146014E0EB01C0EB0380EB0700130E131E5B5BA25B485AA2485A
A212075B120F90C7FCA25A121EA2123EA35AA65AB2127CA67EA3121EA2121F7EA27F1207
7F1203A26C7EA26C7E1378A27F7F130E7FEB0380EB01C0EB00E01460135278BD20>I<12
C07E12707E7E7E120F6C7E6C7EA26C7E6C7EA21378A2137C133C133E131EA2131F7FA214
80A3EB07C0A6EB03E0B2EB07C0A6EB0F80A31400A25B131EA2133E133C137C1378A25BA2
485A485AA2485A48C7FC120E5A5A5A5A5A13527CBD20>I<15301578B3A6007FB812F8B9
12FCA26C17F8C80078C8FCB3A6153036367BAF41>43 D<B512FCA516057F941C>45
D<EB03F8EB1FFF90387E0FC09038F803E03901E000F0484813780007147C48487FA248C7
7EA2481580A3007EEC0FC0A600FE15E0B3007E15C0A4007F141F6C1580A36C15006D5B00
0F143EA26C6C5B6C6C5B6C6C485A6C6C485A90387E0FC0D91FFFC7FCEB03F8233A7DB72A
>48 D<EB01C013031307131F13FFB5FCA2131F1200B3B3A8497E007FB512F0A31C3879B7
2A>I<EB0FF0EB7FFE48B57E3903E03FE0390F000FF0000E6D7E486D7E486D7E12300070
6D7E126012FCB4EC7F807FA56CC7FC121CC8FCEDFF00A34A5A5D14035D4A5A5D140F4A5A
4A5A92C7FC147C5C495A495A495A495A91C8FC011EEB01805B5B49130348481400485A48
5A000EC75A000FB6FC5A5A485CB6FCA321387CB72A>I<1538A2157815F8A21401140314
07A2140F141F141B14331473146314C313011483EB030313071306130C131C1318133013
70136013C01201EA038013005A120E120C5A123812305A12E0B712F8A3C73803F800AB4A
7E0103B512F8A325397EB82A>52 D<007FB812F8B912FCA26C17F8CCFCAE007FB812F8B9
12FCA26C17F836167B9F41>61 D<913A01FF800180020FEBE003027F13F8903A01FF807E
07903A03FC000F0FD90FF0EB039F4948EB01DFD93F80EB00FF49C8127F01FE153F120148
48151F4848150FA248481507A2485A1703123F5B007F1601A35B00FF93C7FCAD127F6DED
0180A3123F7F001F160318006C7E5F6C7E17066C6C150E6C6C5D00001618017F15386D6C
5CD91FE05C6D6CEB03C0D903FCEB0F80902701FF803FC7FC9039007FFFFC020F13F00201
1380313D7BBA3C>67 D<B812F8A30001903880001F6C90C71201EE00FC177C173C171CA2
170CA4170E1706A2ED0180A21700A41503A21507151F91B5FCA3EC001F15071503A21501
A692C8FCAD4813C0B612C0A32F397DB836>70 D<B648B512FEA30001902680000313006C
90C76C5AB3A491B6FCA391C71201B3A6486D497EB648B512FEA337397DB83E>72
D<B5913807FFFE8080C69238007FE06EEC1F80D9DFF0EC0F001706EBCFF8EBC7FCA2EBC3
FEEBC1FFA201C07F6E7EA26E7E6E7E81140F6E7E8114036E7E168080ED7FC016E0153FED
1FF0ED0FF8A2ED07FCED03FEA2ED01FF6F1386A2EE7FC6EE3FE6A2EE1FF6EE0FFEA21607
1603A216011600A2177E486C153E487ED80FFC151EB500C0140EA2170637397DB83E>78
D<B712C016F816FE000190398001FF806C90C7EA3FC0EE0FE0EE07F0EE03F817FC17FE16
01A217FFA717FEA2EE03FCA2EE07F817F0EE0FE0EE3FC0923801FF0091B512FC16F091C9
FCB3A5487FB6FCA330397DB839>80 D<D90FF813C090383FFE0190B512813903F807E339
07E000F74848137F4848133F48C7121F003E140F007E1407A2007C140312FC1501A36C14
00A37E6D14006C7E7F13F86CB47E6C13F8ECFF806C14E06C14F86C14FEC680013F148001
0714C0EB007F020713E0EC007FED3FF0151F150FED07F8A200C01403A21501A37EA216F0
7E15036C15E06C14076C15C06C140F6DEB1F80D8FBF0EB3F00D8F0FE13FE39E03FFFF801
0F13E0D8C00190C7FC253D7CBA2E>83 D<003FB812E0A3D9C003EB001F273E0001FE1303
48EE01F00078160000701770A300601730A400E01738481718A4C71600B3B0913807FF80
011FB612E0A335397DB83C>I<3901800180000313033907000700000E130E485B001813
1800381338003013300070137000601360A200E013E0485BA400CE13CE39FF80FF806D13
C0A3007F137FA2393F803F80390E000E001A1974B92A>92 D<EB1FE0EBFFFC3803E03F39
07000F80390F8007E0486C6C7E13E06E7EA26E7E6C5A6C5AC8FCA4147FEB07FFEB3FE0EB
FE00EA03F8EA0FF0EA1FC0123F485A90C7FC160C12FEA31401A26C13036CEB077C903980
063E18383FC01E3A0FE0781FF03A03FFF00FE03A007F8007C026277DA52A>97
D<EA03F012FFA3120F1203B0EC1FE0EC7FF89038F1E03E9039F3801F809039F7000FC001
FEEB07E049EB03F049EB01F85BED00FCA216FEA2167E167FAA167E16FEA216FC15016D14
F8ED03F07F01EEEB07E001C6EB0FC09039C7801F00903881E07E903800FFF8C7EA1FC028
3B7EB92E>I<EB03FC90381FFF8090387E03E03901F80070484813F83907E001FC380FC0
03A2EA1F80123F90380001F848EB00F01500A2127E12FEAA127E127FA26C14067F001F14
0E6D130C000F141C6C6C13386C6C13706C6C13E039007C07C090381FFF00EB07F81F277D
A525>I<ED0FC0EC03FFA3EC003F150FB0EB03F8EB1FFF90387E078F9038F801EF3903F0
007F4848133F4848131FA24848130F123F90C7FC5AA2127E12FEAA127E127FA27EA26C6C
131FA26C6C133F6C6C137F6C6CEBEFF03A01F801CFFF39007C078F90381FFE0FD907F813
C0283B7DB92E>I<EB07F8EB1FFF90387C0FC03901F803E03903F001F0D807E013F8380F
C0004848137CA248C7127E153E5A153F127E12FEA3B7FCA248C8FCA5127EA2127FA26C14
037F001F14076C6C13060007140E6D131CD801F013386C6C137090387E03E090381FFF80
903803FC0020277EA525>I<147E903803FF8090380FC1E0EB1F8790383F0FF0137EA213
FCA23901F803C091C7FCADB512FCA3D801F8C7FCB3AB487E387FFFF8A31C3B7FBA19>I<
ED03F090390FF00FF890393FFC3C3C9039F81F707C3901F00FE03903E007C03A07C003E0
10000FECF000A248486C7EA86C6C485AA200075C6C6C485A6D485A6D48C7FC38073FFC38
060FF0000EC9FCA4120FA213C06CB512C015F86C14FE6CECFF804815C03A0F80007FE048
C7EA0FF0003E140348140116F8481400A56C1401007C15F06CEC03E0003F1407D80F80EB
0F80D807E0EB3F003901FC01FC39007FFFF0010790C7FC26387EA52A>I<EA03F012FFA3
120F1203B0EC0FF0EC3FFCECF03F9039F1C01F809039F3800FC0EBF70013FE496D7EA25B
A35BB3A3486C497EB500C1B51280A3293A7EB92E>I<EA0380EA0FE0487EA56C5AEA0380
C8FCAAEA03F012FFA312071203B3AA487EB512C0A312387EB717>I<EA03F012FFA3120F
1203B1913801FFFCA39138007FC01600157C15705D4A5A4A5A4AC7FC141E1438147814FC
13F1EBF3FEEBF73F01FE7FEBF81F496C7E8114076E7E6E7E811400157E157F811680ED1F
C0486CEB3FF0B500C0B5FCA3283A7EB92C>107 D<EA03F012FFA3120F1203B3B3AD487E
B512C0A3123A7EB917>I<2703F00FF0EB1FE000FFD93FFCEB7FF8913AF03F01E07E903B
F1C01F83803F3D0FF3800FC7001F802603F70013CE01FE14DC49D907F8EB0FC0A2495CA3
495CB3A3486C496CEB1FE0B500C1B50083B5FCA340257EA445>I<3903F00FF000FFEB3F
FCECF03F9039F1C01F803A0FF3800FC03803F70013FE496D7EA25BA35BB3A3486C497EB5
00C1B51280A329257EA42E>I<EB03FE90380FFF8090383E03E09038F800F84848137C48
487F48487F4848EB0F80001F15C090C712074815E0A2007EEC03F0A400FE15F8A9007E15
F0A2007F14076C15E0A26C6CEB0FC0000F15806D131F6C6CEB3F006C6C137EC66C13F890
387E03F090381FFFC0D903FEC7FC25277EA52A>I<3903F01FE000FFEB7FF89038F1E07E
9039F3801F803A0FF7000FC0D803FEEB07E049EB03F04914F849130116FC150016FEA316
7FAA16FEA3ED01FCA26DEB03F816F06D13076DEB0FE001F614C09039F7803F009038F1E0
7E9038F0FFF8EC1FC091C8FCAB487EB512C0A328357EA42E>I<D903F813C090381FFE01
90387E07819038FC01C33903F000E3000714774848133749133F001F141F485A150F48C7
FCA312FEAA127FA37E6D131F121F6D133F120F6C6C137F6C6C13EF3901F801CF39007E07
8F90381FFE0FEB07F890C7FCABED1FE00203B5FCA328357DA42C>I<3807E01F00FFEB7F
C09038E1E3E09038E387F0380FE707EA03E613EE9038EC03E09038FC0080491300A45BB3
A2487EB512F0A31C257EA421>I<EBFF03000313E7380F80FF381E003F487F487F00707F
12F0A2807EA27EB490C7FCEA7FE013FF6C13E06C13F86C7F00037FC67F01071380EB007F
141F00C0EB0FC01407A26C1303A37E15806C13077EEC0F00B4131E38F3C07C38E1FFF038
C03F801A277DA521>I<1318A51338A31378A313F8120112031207001FB5FCB6FCA2D801
F8C7FCB215C0A93800FC011580EB7C03017E13006D5AEB0FFEEB01F81A347FB220>I<D8
03F0EB07E000FFEB01FFA3000FEB001F00031407B3A4150FA3151F12016D133F0000EC77
F86D9038E7FF8090383F03C790381FFF87903A03FC07E00029267EA42E>I<B538803FFE
A33A0FF8000FF06C48EB07E00003EC03C06D148000011500A26C6C1306A26D130E017E13
0CA26D5BA2EC8038011F1330A26D6C5AA214E001075BA2903803F180A3D901FBC7FCA214
FF6D5AA2147CA31438A227257EA32C>I<B538803FFEA33A0FF8000FF06C48EB07C00003
EC03806C7E16007F00001406A2017E5BA2137F6D5BA26D6C5AA2ECC070010F1360A26D6C
5AA214F101035BA2D901FBC7FCA214FF6D5AA2147CA31438A21430A214701460A25CA2EA
7C0100FE5B130391C8FC1306EAFC0EEA701C6C5AEA1FF0EA0FC027357EA32C>121
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fo cmbx12 12 23
/Fo 23 121 df<EB07C0EB0FE0EB1FF0EB3FF8137F13FFA25A4813F05A4813C01480381F
FE00EA3FF8EA7FE0EAFF8048C7FC127C1230151369C538>19 D<EC01E01403EC0FC0EC1F
80EC3F00147E5C1301495A495A5C130F495A133F5C137F49C7FCA2485AA2485AA212075B
A2120F5BA2121FA25B123FA4485AA612FFA25BAE7FA2127FA66C7EA4121F7FA2120FA27F
1207A27F1203A26C7EA26C7EA26D7E133F80131F6D7E1307806D7E6D7E1300147E80EC1F
80EC0FC0EC03E014011B6476CA2C>40 D<12F07E127E7E6C7E6C7E6C7E7F6C7E6C7E1200
7F137F80133F806D7EA26D7EA26D7EA2801303A2801301A280A27F1580A4EC7FC0A615E0
A2143FAE147FA215C0A6ECFF80A415005BA25CA213035CA213075CA2495AA2495AA2495A
5C137F91C7FC13FE5B1201485A485A5B485A485A48C8FC127E12F85A1B647ACA2C>I<B6
12F8A91D097F9A25>45 D<B64BB512FE8181A281D8003F6D91C7EA780081013D7F81133C
6E7E6E7F6E7F6E7F6E7F82806E7F6E7F6F7E6F7F83816F7F6F7F6F7F6F7F6F7F8382707F
707F707F707F8482707F707F717E7113807113C019E0837113F07113F87113FC7113FE19
FF847213F884848484A28484197F193F191FA2190F1907B61603190119001A78A24F447C
C358>78 D<923807FFC092B512FE0207ECFFC0021F15F091267FFE0013FC902601FFF0EB
1FFF010701C0010713C04990C700017F49486E7F49486F7E49486F7E49486F7E48496F7E
48496F1380A248496F13C0A24819E091C97E4819F0A248487013F8A3007F19FCA249177F
A300FF19FEAD007F19FCA36D17FF003F19F8A3001F19F06D5EA26C19E06E01FE5B6C9126
03FF8014C06C6D486D4813804B13E06C9028E01F83F00F13006C903BF01E00F81FFE9026
7FF83E90387C3FFC90263FFC3C6D485AD91FFE91381EFFF0D90FFF021F5B6D01FE5D0101
94C7FC6D6D6CB45A023F90B512F8020703E0130202006F1307030713C792C7EA07F8716C
130F72131F9538FF80FF96B5FC7114FEA3831AFCA27213F81AF0847213E07213C0721300
F001FC48587AC454>81 D<DAFFE0131C010701FE133C013F9038FF807C90B6EAE0FC4815
F9489038801FFF3907FC00014848EB007F4848143F4848140F491407007F15035B160116
0012FF177CA27FA26D153C7F7F6D92C7FC6C7EEBFFE014FE6CEBFFF015FF6C15E016FC6C
816C6F7E6C826C826C6C81011F810107811300020F80140003077FED007F82040F138082
8212F082A282A27EA218007EA26C5D6C5E6D14036D5D6D140701F84A5A01FFEC3FF002F8
EBFFE0486CB65AD8FC1F92C7FCD8F80714FC48C614F0480107138031467AC43E>83
D<903801FFE0011F13FE017F6D7E48B612E03A03FE007FF84848EB1FFC6D6D7E486C6D7E
A26F7FA36F7F6C5A6C5AEA00F090C7FCA40203B5FC91B6FC1307013F13F19038FFFC0100
0313E0000F1380381FFE00485A5B127F5B12FF5BA35DA26D5B6C6C5B4B13F0D83FFE013E
EBFFC03A1FFF80FC7F0007EBFFF86CECE01FC66CEB8007D90FFCC9FC322F7DAD36>97
D<EC3FFC49B512C0010F14F0013F14FC90397FF003FE9039FFC001FF0003495A48494813
805B120F485AA2485A6F1300007F6E5AED00784991C7FCA212FFAC6C7EA3123F6DEC03C0
A26C6C1407000F16806D140F6C6DEB1F006C6D133E6C01F05B3A007FFC03F86DB55A010F
14C0010391C7FC9038003FF82A2F7CAD32>99 D<EE03FEED07FFA5ED001F160FB1EC3FE0
903803FFFC010FEBFF8F013F14CF9039FFF807FF48EBC00148903880007F4890C7123F48
48141F49140F121F485AA3127F5BA212FFAC127FA37F123FA26C6C141FA26C6C143F0007
157F6C6C91B5FC6CD9C00314FC6C9038F01FEF6DB5128F011FEBFE0F010713F89026007F
C0EBF80036467CC43E>I<EC3FF80103B57E010F14E0013F8090397FF83FF89039FFC007
FC48496C7E48496C7E48486D1380485A001FED7FC05B003FED3FE0A2127F5B17F0161F12
FFA290B7FCA401F0C9FCA5127FA27FA2123F17F06C7E16016C6C15E06C6C14036C6DEB07
C06C6DEB0F806C01F0EB3F0090397FFE01FE011FB55A010714F0010114C09026001FFEC7
FC2C2F7DAD33>I<137C48B4FC4813804813C0A24813E0A56C13C0A26C13806C1300EA00
7C90C7FCAAEB7FC0EA7FFFA512037EB3AFB6FCA518467CC520>105
D<EB7FC0B5FCA512037EB293387FFFE0A593380FE0004C5A4CC7FC167E5EED03F8ED07E0
4B5A4B5A037FC8FC15FEECC1FCECC3FE14C7ECDFFF91B57E82A202F97F02E17F02C07FEC
807F6F7E826F7E816F7F836F7F816F7F83707E163FB60003B512F8A535457DC43B>107
D<EB7FC0B5FCA512037EB3B3B3A3B61280A519457CC420>I<90397F8007FEB590383FFF
8092B512E0028114F8913987F03FFC91388F801F000390399F000FFE6C139E14BC02F86D
7E5CA25CA35CB3A7B60083B512FEA5372D7CAC3E>110 D<EC1FFC49B512C0010714F001
1F14FC90397FF80FFF9026FFC0017F48496C7F4848C7EA3FE000078248486E7E49140F00
1F82A2003F82491407007F82A400FF1780AA007F1700A46C6C4A5AA2001F5E6D141F000F
5E6C6C4A5AA26C6C6CEBFFE06C6D485B27007FF80F90C7FC6DB55A010F14F8010114C090
26001FFCC8FC312F7DAD38>I<DA3FE0131E902603FFFC133E010F01FF137E013F148090
3AFFF80FE0FE489038E003F148EBC0014890388000FB4890C7127F49143F001F151F485A
160F5B127FA3485AAC6C7EA46C7EA26C6C141F163F6C6C147F6C15FF6C6D5A6C9038E003
EF6C9038F01FCF6DB5128F011FEBFE0F010313F89038007FC091C7FCAD0307B512FCA536
407CAC3B>113 D<90387F807FB53881FFE0028313F0028F13F8ED8FFC91389F1FFE0003
13BE6C13BC14F8A214F0ED0FFC9138E007F8ED01E092C7FCA35CB3A5B612E0A5272D7DAC
2E>I<90391FFC038090B51287000314FF120F381FF003383FC00049133F48C7121F127E
00FE140FA215077EA27F01E090C7FC13FE387FFFF014FF6C14C015F06C14FC6C80000380
6C15806C7E010F14C0EB003F020313E0140000F0143FA26C141F150FA27EA26C15C06C14
1FA26DEB3F8001E0EB7F009038F803FE90B55A00FC5CD8F03F13E026E007FEC7FC232F7C
AD2C>I<EB01E0A51303A41307A2130FA2131FA2133F137F13FF1203000F90B51280B7FC
A4C601E0C7FCB3A3ED01E0A9150302F013C0137F150790393FF80F8090391FFC1F006DB5
FC6D13FC01015B9038003FE023407EBE2C>I<D97FC049B4FCB50103B5FCA50003EC000F
6C81B3A85EA25EA25E7E6E491380017FD901F713FE9138F807E76DB512C7010F14070103
13FE9026007FF0EBFC00372E7CAC3E>I<B6903803FFFCA5000101E09038003E006C163C
80017F5D8017F8013F5D6E1301011F5D6E1303010F5D6E13076D5DED800F6D92C7FC15C0
5E6DEBE01E163E6D143CEDF07C027F1378EDF8F8023F5B15FD021F5B15FF6E5BA36E5BA2
6E90C8FCA26E5AA26E5AA21578362C7EAB3B>I<B500FE90383FFFF0A5C601F0903803E0
006D6C495A013F4A5A6D6C49C7FC6E5B6D6C137E6DEB807C6D6D5A6DEBC1F0EDE3E06DEB
F7C06EB45A806E90C8FC5D6E7E6E7F6E7FA24A7F4A7F8291381F3FFCEC3E1F027C7F4A6C
7E49486C7F01036D7F49487E02C08049486C7F49C76C7E013E6E7E017E141FB500E090B5
12FCA5362C7EAB3B>120 D E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4

%%EndSetup
%%Page: 1 1
1 0 bop -230 -280 4179 4 v -232 -180 4 100 v 3947 -180
V -232 -80 4 101 v 383 -106 a Fo(\(Quelques\))37 b(solutions)f(exactes)
i(des)d(\023)-54 b(equations)38 b(de)g(Na)m(vier-Stok)m(es)p
3947 -80 V -232 20 4 100 v 3947 20 V -230 23 4179 4 v
-230 40 V -232 139 4 100 v -180 109 a Fn(Sc)n(h)n(\023)-39
b(ema)p 931 139 V 887 w(Hyp)r(oth)n(\022)g(eses)p 1503
139 V 157 w(Solution)p 2902 139 V 1099 w(Nom)27 b(de)h(l')n(\023)-39
b(ecoulemen)n(t)p 3947 139 V -230 143 4179 4 v -230 159
V -232 838 4 680 v -130 808 a @beginspecial 0 @llx 0
@lly 144 @urx 67 @ury 1440 @rwi @setspecial
%%BeginDocument: couette-plan.pstex
%!PS-Adobe-2.0 EPSF-2.0
%%Title: couette-plan.pstex
%%Creator: fig2dev Version 3.2 Patchlevel 1
%%CreationDate: Tue Oct  5 14:42:09 1999
%%For: brancher@hydra.ups-tlse.fr (Pierre BRANCHER,,,,)
%%Orientation: Portrait
%%BoundingBox: 0 0 144 67
%%Pages: 0
%%BeginSetup
%%EndSetup
%%Magnification: 0.7500
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
-10.0 81.0 translate
1 -1 scale
.9 .9 scale % to make patterns same scale as in xfig

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index show		% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proe char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% right45
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 32 true [ 32 0 0 -32 0 32 ]
	{<010101010202020204040404080808081010101020202020
	404040408080808001010101020202020404040408080808
	101010102020202040404040808080800101010102020202
	040404040808080810101010202020204040404080808080
	010101010202020204040404080808081010101020202020
	4040404080808080>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P5 exch def
1.1111 1.1111 scale %restore scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def
%%EndProlog

$F2psBegin
10 setmiterlimit
n -1000 2699 m -1000 -1000 l 4243 -1000 l 4243 2699 l cp clip
 0.04724 0.04724 sc
% Polyline
7.500 slw
n 240 315 m 2490 315 l 2490 450 l 240 450 l cp gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P5 [16 0 0 -16 16.00 21.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
gs  clippath
2515 1500 m 2605 1530 l 2515 1560 l 2620 1560 l 2620 1500 l cp
2220 1260 m 2250 1170 l 2280 1260 l 2280 1155 l 2220 1155 l cp
clip
n 2250 1170 m 2250 1530 l 2605 1530 l gs col0 s gr gr

% arrowhead
n 2220 1260 m 2250 1170 l 2280 1260 l 2250 1245 l 2220 1260 l  cp gs col7 1.00 shd ef gr  col0 s
% arrowhead
n 2515 1500 m 2605 1530 l 2515 1560 l 2530 1530 l 2515 1500 l  cp gs col7 1.00 shd ef gr  col0 s
% Polyline
n 900 450 m 900 1575 l gs col0 s gr 
% Polyline
n 900 1575 m 2025 450 l gs col0 s gr 
% Polyline
gs  clippath
1503 878 m 1575 900 l 1503 923 l 1590 923 l 1590 878 l cp
clip
n 900 900 m 1575 900 l gs col0 s gr gr

% arrowhead
n 1503 878 m 1575 900 l 1503 923 l 1515 900 l 1503 878 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
1278 1103 m 1350 1125 l 1278 1148 l 1365 1148 l 1365 1103 l cp
clip
n 900 1125 m 1350 1125 l gs col0 s gr gr

% arrowhead
n 1278 1103 m 1350 1125 l 1278 1148 l 1290 1125 l 1278 1103 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
1728 653 m 1800 675 l 1728 698 l 1815 698 l 1815 653 l cp
clip
n 900 675 m 1800 675 l gs col0 s gr gr

% arrowhead
n 1728 653 m 1800 675 l 1728 698 l 1740 675 l 1728 653 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
n 232 1575 m 2475 1575 l 2475 1687 l 232 1687 l cp gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P5 [16 0 0 -16 15.47 105.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
gs  clippath
488 1470 m 450 1575 l 413 1470 l 413 1590 l 488 1590 l cp
413 555 m 450 450 l 488 555 l 488 435 l 413 435 l cp
clip
n 450 450 m 450 1575 l gs col0 s gr gr

% arrowhead
n 413 555 m 450 450 l 488 555 l  col0 s
% arrowhead
n 488 1470 m 450 1575 l 413 1470 l  col0 s
% Polyline
gs  clippath
1053 1328 m 1125 1350 l 1053 1373 l 1140 1373 l 1140 1328 l cp
clip
n 900 1350 m 1125 1350 l gs col0 s gr gr

% arrowhead
n 1053 1328 m 1125 1350 l 1053 1373 l 1065 1350 l 1053 1328 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
90.000 slw
gs  clippath
1813 333 m 1932 385 l 1813 438 l 2150 438 l 2150 333 l cp
clip
n 890 385 m 2045 385 l gs col0 s gr gr

% arrowhead
n 1813 333 m 1932 385 l 1813 438 l 1813 385 l 1813 333 l  cp gs 0.00 setgray ef gr  col0 s
$F2psEnd
rs
end

%%EndDocument
 @endspecial 684 600 a Fm(~)-32 b(e)720 608 y Fl(y)761
697 y Fm(~)g(e)797 705 y Fl(x)576 390 y Fm(U)390 569
y(u)p Fk(\()p Fm(y)r Fk(\))-22 567 y Fm(h)86 738 y Fk(0)p
931 838 V 1095 361 a Fj(@)t(~)-41 b(u)p 1095 398 97 4
v 1104 474 a(@)5 b(t)1224 417 y Fn(=)1305 399 y Fj(~)1312
417 y Fn(0)993 624 y Fj(@)t(~)-41 b(u)p 993 662 V 993
738 a(@)5 b(x)1122 681 y Fn(=)1219 624 y Fj(@)t(~)-41
b(u)p 1219 662 V 1222 738 a(@)5 b(z)1349 681 y Fn(=)1430
663 y Fj(~)1436 681 y Fn(0)p 1503 838 4 680 v 1641 459
a Fj(~)-41 b(u)23 b Fn(=)f Fj(u)p Fn(\()p Fj(y)s Fn(\))11
b Fj(~)-39 b(e)2009 471 y Fi(x)2133 459 y Fn(a)n(v)n(ec)82
b Fj(u)p Fn(\()p Fj(y)s Fn(\))23 b(=)2647 403 y Fj(U)9
b(y)p 2647 440 110 4 v 2678 516 a(h)2065 677 y(p)23 b
Fn(=)g Fj(C)2283 643 y Fi(te)p 2902 838 4 680 v 2954
418 a Fn(Couette)k(plan)2954 517 y(sans)f(gradien)n(t)h(de)g(pression)
2954 617 y(\()p Fj(@)5 b(p=@)g(x)22 b Fn(=)h(0\))p 3947
838 V -230 842 4179 4 v -230 858 V -232 1537 4 680 v
-130 1507 a @beginspecial 0 @llx 0 @lly 144 @urx 67 @ury
1440 @rwi @setspecial
%%BeginDocument: poiseuille-plan.pstex
%!PS-Adobe-2.0 EPSF-2.0
%%Title: poiseuille-plan.pstex
%%Creator: fig2dev Version 3.2 Patchlevel 1
%%CreationDate: Tue Oct  5 14:43:41 1999
%%For: brancher@hydra.ups-tlse.fr (Pierre BRANCHER,,,,)
%%Orientation: Portrait
%%BoundingBox: 0 0 144 67
%%Pages: 0
%%BeginSetup
%%EndSetup
%%Magnification: 0.7500
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
-10.0 81.0 translate
1 -1 scale
.9 .9 scale % to make patterns same scale as in xfig

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index show		% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proe char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% right45
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 32 true [ 32 0 0 -32 0 32 ]
	{<010101010202020204040404080808081010101020202020
	404040408080808001010101020202020404040408080808
	101010102020202040404040808080800101010102020202
	040404040808080810101010202020204040404080808080
	010101010202020204040404080808081010101020202020
	4040404080808080>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P5 exch def
1.1111 1.1111 scale %restore scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def
%%EndProlog

$F2psBegin
10 setmiterlimit
n -1000 2699 m -1000 -1000 l 4243 -1000 l 4243 2699 l cp clip
 0.04724 0.04724 sc
% Polyline
7.500 slw
n 225 315 m 2475 315 l 2475 450 l 225 450 l cp gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P5 [16 0 0 -16 15.00 21.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
gs  clippath
2515 1500 m 2605 1530 l 2515 1560 l 2620 1560 l 2620 1500 l cp
2220 1260 m 2250 1170 l 2280 1260 l 2280 1155 l 2220 1155 l cp
clip
n 2250 1170 m 2250 1530 l 2605 1530 l gs col0 s gr gr

% arrowhead
n 2220 1260 m 2250 1170 l 2280 1260 l 2250 1245 l 2220 1260 l  cp gs col7 1.00 shd ef gr  col0 s
% arrowhead
n 2515 1500 m 2605 1530 l 2515 1560 l 2530 1530 l 2515 1500 l  cp gs col7 1.00 shd ef gr  col0 s
% Polyline
n 232 1575 m 2475 1575 l 2475 1687 l 232 1687 l cp gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P5 [16 0 0 -16 15.47 105.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 900 450 m 900 1575 l gs col0 s gr 
% Polyline
gs  clippath
488 1470 m 450 1575 l 413 1470 l 413 1590 l 488 1590 l cp
413 555 m 450 450 l 488 555 l 488 435 l 413 435 l cp
clip
n 450 450 m 450 1575 l gs col0 s gr gr

% arrowhead
n 413 555 m 450 450 l 488 555 l  col0 s
% arrowhead
n 488 1470 m 450 1575 l 413 1470 l  col0 s
% Polyline
gs  clippath
1423 629 m 1495 650 l 1423 674 l 1510 672 l 1510 627 l cp
clip
n 908 652 m 1358 652 l 1495 650 l gs col0 s gr gr

% arrowhead
n 1423 629 m 1495 650 l 1423 674 l 1435 651 l 1423 629 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
1703 818 m 1775 840 l 1703 863 l 1790 863 l 1790 818 l cp
clip
n 908 840 m 1583 840 l 1775 840 l gs col0 s gr gr

% arrowhead
n 1703 818 m 1775 840 l 1703 863 l 1715 840 l 1703 818 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
1803 990 m 1875 1012 l 1803 1035 l 1890 1035 l 1890 990 l cp
clip
n 908 1012 m 1808 1012 l 1875 1012 l gs col0 s gr gr

% arrowhead
n 1803 990 m 1875 1012 l 1803 1035 l 1815 1012 l 1803 990 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
1698 1170 m 1770 1192 l 1698 1215 l 1785 1215 l 1785 1170 l cp
clip
n 901 1192 m 1576 1192 l 1770 1192 l gs col0 s gr gr

% arrowhead
n 1698 1170 m 1770 1192 l 1698 1215 l 1710 1192 l 1698 1170 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
1418 1349 m 1490 1370 l 1418 1394 l 1505 1392 l 1505 1347 l cp
clip
n 908 1372 m 1358 1372 l 1490 1370 l gs col0 s gr gr

% arrowhead
n 1418 1349 m 1490 1370 l 1418 1394 l 1430 1371 l 1418 1349 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
n 907 465 m 910 466 l 916 467 l 928 470 l 945 474 l 969 480 l
 998 487 l 1032 496 l 1069 506 l 1109 516 l 1149 526 l
 1189 537 l 1228 548 l 1265 558 l 1300 568 l 1332 578 l
 1363 588 l 1391 597 l 1418 606 l 1443 615 l 1467 625 l
 1490 634 l 1512 644 l 1533 654 l 1555 664 l 1576 675 l
 1596 686 l 1617 698 l 1638 710 l 1658 723 l 1678 737 l
 1698 751 l 1717 766 l 1736 781 l 1754 796 l 1771 812 l
 1786 828 l 1801 844 l 1815 861 l 1827 877 l 1838 893 l
 1848 909 l 1856 925 l 1862 941 l 1868 956 l 1871 972 l
 1874 987 l 1875 1002 l 1874 1017 l 1873 1033 l 1869 1048 l
 1865 1064 l 1859 1080 l 1851 1097 l 1842 1113 l 1832 1130 l
 1820 1147 l 1807 1164 l 1793 1181 l 1777 1198 l 1760 1215 l
 1743 1231 l 1725 1248 l 1706 1263 l 1686 1278 l 1666 1293 l
 1646 1307 l 1625 1320 l 1604 1333 l 1583 1345 l 1562 1356 l
 1541 1367 l 1521 1377 l 1500 1387 l 1479 1396 l 1457 1405 l
 1433 1414 l 1409 1423 l 1382 1432 l 1354 1442 l 1324 1451 l
 1293 1461 l 1259 1471 l 1223 1481 l 1186 1491 l 1147 1502 l
 1109 1512 l 1070 1522 l 1034 1531 l 1000 1540 l 970 1548 l
 944 1554 l 924 1559 l 909 1563 l 900 1565 l 894 1566 l
 892 1567 l gs col0 s gr 
$F2psEnd
rs
end

%%EndDocument
 @endspecial 687 1299 a Fm(~)-32 b(e)723 1307 y Fl(y)764
1396 y Fm(~)f(e)799 1404 y Fl(x)89 1437 y Fk(0)-13 1264
y Fm(h)538 1143 y(u)p Fk(\()p Fm(y)r Fk(\))p 931 1537
V 1095 1060 a Fj(@)t(~)-41 b(u)p 1095 1097 97 4 v 1104
1173 a(@)5 b(t)1224 1116 y Fn(=)1305 1098 y Fj(~)1312
1116 y Fn(0)993 1324 y Fj(@)t(~)-41 b(u)p 993 1361 V
993 1437 a(@)5 b(x)1122 1380 y Fn(=)1219 1324 y Fj(@)t(~)-41
b(u)p 1219 1361 V 1222 1437 a(@)5 b(z)1349 1380 y Fn(=)1430
1362 y Fj(~)1436 1380 y Fn(0)p 1503 1537 4 680 v 1722
1077 a Fj(dp)p 1719 1114 91 4 v 1719 1190 a(dx)1843 1133
y Fn(=)22 b Fj(C)1995 1098 y Fi(te)2139 1133 y Fn(et)82
b Fj(~)-41 b(u)23 b Fn(=)g Fj(u)p Fn(\()p Fj(y)s Fn(\))11
b Fj(~)-39 b(e)2659 1145 y Fi(x)1691 1395 y Fn(a)n(v)n(ec)81
b Fj(u)p Fn(\()p Fj(y)s Fn(\))23 b(=)2230 1339 y(1)p
2205 1376 92 4 v 2205 1452 a(2)p Fj(\026)2319 1339 y(dp)p
2316 1376 91 4 v 2316 1452 a(dx)2417 1395 y(y)s Fn(\()p
Fj(h)18 b Fh(\000)g Fj(y)s Fn(\))p 2902 1537 4 680 v
2954 1219 a(P)n(oiseuille)26 b(plan)p 3947 1537 V -230
1541 4179 4 v -230 1557 V -232 2368 4 811 v -130 2272
a @beginspecial 0 @llx 0 @lly 144 @urx 67 @ury 1440 @rwi
@setspecial
%%BeginDocument: couette-poiseuille.pstex
%!PS-Adobe-2.0 EPSF-2.0
%%Title: couette-poiseuille.pstex
%%Creator: fig2dev Version 3.2 Patchlevel 1
%%CreationDate: Tue Oct  5 14:40:12 1999
%%For: brancher@hydra.ups-tlse.fr (Pierre BRANCHER,,,,)
%%Orientation: Portrait
%%BoundingBox: 0 0 144 67
%%Pages: 0
%%BeginSetup
%%EndSetup
%%Magnification: 0.7500
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
-10.0 81.0 translate
1 -1 scale
.9 .9 scale % to make patterns same scale as in xfig

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index show		% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proe char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% right45
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 32 true [ 32 0 0 -32 0 32 ]
	{<010101010202020204040404080808081010101020202020
	404040408080808001010101020202020404040408080808
	101010102020202040404040808080800101010102020202
	040404040808080810101010202020204040404080808080
	010101010202020204040404080808081010101020202020
	4040404080808080>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P5 exch def
1.1111 1.1111 scale %restore scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/reencdict 12 dict def /ReEncode { reencdict begin
/newcodesandnames exch def /newfontname exch def /basefontname exch def
/basefontdict basefontname findfont def /newfont basefontdict maxlength dict def
basefontdict { exch dup /FID ne { dup /Encoding eq
{ exch dup length array copy newfont 3 1 roll put }
{ exch newfont 3 1 roll put } ifelse } { pop pop } ifelse } forall
newfont /FontName newfontname put newcodesandnames aload pop
128 1 255 { newfont /Encoding get exch /.notdef put } for
newcodesandnames length 2 idiv { newfont /Encoding get 3 1 roll put } repeat
newfontname newfont definefont pop end } def
/isovec [
8#200 /grave 8#201 /acute 8#202 /circumflex 8#203 /tilde
8#204 /macron 8#205 /breve 8#206 /dotaccent 8#207 /dieresis
8#210 /ring 8#211 /cedilla 8#212 /hungarumlaut 8#213 /ogonek 8#214 /caron
8#220 /dotlessi 8#230 /oe 8#231 /OE
8#240 /space 8#241 /exclamdown 8#242 /cent 8#243 /sterling
8#244 /currency 8#245 /yen 8#246 /brokenbar 8#247 /section 8#250 /dieresis
8#251 /copyright 8#252 /ordfeminine 8#253 /guillemotleft 8#254 /logicalnot
8#255 /endash 8#256 /registered 8#257 /macron 8#260 /degree 8#261 /plusminus
8#262 /twosuperior 8#263 /threesuperior 8#264 /acute 8#265 /mu 8#266 /paragraph
8#267 /periodcentered 8#270 /cedilla 8#271 /onesuperior 8#272 /ordmasculine
8#273 /guillemotright 8#274 /onequarter 8#275 /onehalf
8#276 /threequarters 8#277 /questiondown 8#300 /Agrave 8#301 /Aacute
8#302 /Acircumflex 8#303 /Atilde 8#304 /Adieresis 8#305 /Aring
8#306 /AE 8#307 /Ccedilla 8#310 /Egrave 8#311 /Eacute
8#312 /Ecircumflex 8#313 /Edieresis 8#314 /Igrave 8#315 /Iacute
8#316 /Icircumflex 8#317 /Idieresis 8#320 /Eth 8#321 /Ntilde 8#322 /Ograve
8#323 /Oacute 8#324 /Ocircumflex 8#325 /Otilde 8#326 /Odieresis 8#327 /multiply
8#330 /Oslash 8#331 /Ugrave 8#332 /Uacute 8#333 /Ucircumflex
8#334 /Udieresis 8#335 /Yacute 8#336 /Thorn 8#337 /germandbls 8#340 /agrave
8#341 /aacute 8#342 /acircumflex 8#343 /atilde 8#344 /adieresis 8#345 /aring
8#346 /ae 8#347 /ccedilla 8#350 /egrave 8#351 /eacute
8#352 /ecircumflex 8#353 /edieresis 8#354 /igrave 8#355 /iacute
8#356 /icircumflex 8#357 /idieresis 8#360 /eth 8#361 /ntilde 8#362 /ograve
8#363 /oacute 8#364 /ocircumflex 8#365 /otilde 8#366 /odieresis 8#367 /divide
8#370 /oslash 8#371 /ugrave 8#372 /uacute 8#373 /ucircumflex
8#374 /udieresis 8#375 /yacute 8#376 /thorn 8#377 /ydieresis] def
/Times-Roman /Times-Roman-iso isovec ReEncode
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def
%%EndProlog

$F2psBegin
10 setmiterlimit
n -1000 2699 m -1000 -1000 l 4243 -1000 l 4243 2699 l cp clip
 0.04724 0.04724 sc
% Polyline
7.500 slw
n 230 315 m 2480 315 l 2480 450 l 230 450 l cp gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P5 [16 0 0 -16 15.33 21.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 900 450 m 900 1575 l gs col0 s gr 
% Polyline
n 900 1575 m 2025 450 l gs col0 s gr 
% Polyline
n 232 1575 m 2475 1575 l 2475 1687 l 232 1687 l cp gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P5 [16 0 0 -16 15.47 105.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
75.000 slw
gs  clippath
1788 340 m 1908 385 l 1788 430 l 2105 430 l 2105 340 l cp
clip
n 890 385 m 2015 385 l gs col0 s gr gr

% arrowhead
n 1788 340 m 1908 385 l 1788 430 l 1788 385 l 1788 340 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
7.500 slw
gs  clippath
2515 1500 m 2605 1530 l 2515 1560 l 2620 1560 l 2620 1500 l cp
2220 1260 m 2250 1170 l 2280 1260 l 2280 1155 l 2220 1155 l cp
clip
n 2250 1170 m 2250 1530 l 2605 1530 l gs col0 s gr gr

% arrowhead
n 2220 1260 m 2250 1170 l 2280 1260 l 2250 1245 l 2220 1260 l  cp gs col7 1.00 shd ef gr  col0 s
% arrowhead
n 2515 1500 m 2605 1530 l 2515 1560 l 2530 1530 l 2515 1500 l  cp gs col7 1.00 shd ef gr  col0 s
% Polyline
n 2020 460 m 2020 463 l 2020 471 l 2020 484 l 2019 503 l 2018 527 l
 2017 554 l 2015 583 l 2012 612 l 2009 641 l 2005 669 l
 2000 695 l 1994 720 l 1988 743 l 1980 766 l 1972 788 l
 1962 810 l 1950 833 l 1940 850 l 1930 868 l 1919 886 l
 1906 905 l 1893 924 l 1879 944 l 1863 965 l 1847 986 l
 1829 1007 l 1811 1029 l 1792 1051 l 1772 1072 l 1752 1094 l
 1731 1116 l 1710 1137 l 1688 1158 l 1667 1178 l 1645 1197 l
 1624 1216 l 1602 1234 l 1580 1251 l 1559 1268 l 1537 1284 l
 1516 1299 l 1496 1313 l 1475 1326 l 1454 1339 l 1433 1352 l
 1410 1364 l 1386 1377 l 1361 1389 l 1334 1402 l 1306 1416 l
 1276 1429 l 1244 1443 l 1210 1458 l 1175 1472 l 1139 1487 l
 1102 1502 l 1067 1516 l 1032 1529 l 1001 1542 l 973 1552 l
 949 1562 l 930 1569 l 916 1574 l 907 1577 l 902 1579 l
 900 1580 l gs col0 s gr 
% Polyline
n 900 1565 m 900 1562 l 900 1554 l 900 1541 l 901 1522 l 902 1498 l
 903 1471 l 905 1442 l 908 1413 l 911 1384 l 915 1356 l
 920 1330 l 926 1305 l 932 1282 l 940 1259 l 948 1237 l
 958 1215 l 970 1193 l 980 1175 l 990 1157 l 1001 1139 l
 1014 1120 l 1027 1101 l 1041 1081 l 1057 1060 l 1073 1039 l
 1091 1018 l 1109 996 l 1128 974 l 1148 953 l 1168 931 l
 1189 909 l 1210 888 l 1232 867 l 1253 847 l 1275 828 l
 1296 809 l 1318 791 l 1340 774 l 1361 757 l 1383 741 l
 1404 726 l 1424 712 l 1445 699 l 1466 686 l 1487 673 l
 1510 661 l 1534 648 l 1559 636 l 1586 623 l 1614 609 l
 1644 596 l 1676 582 l 1710 567 l 1745 553 l 1781 538 l
 1818 523 l 1853 509 l 1888 496 l 1919 483 l 1947 473 l
 1971 463 l 1990 456 l 2004 451 l 2013 448 l 2018 446 l
 2020 445 l gs col0 s gr 
% Polyline
n 2025 460 m 2029 462 l 2036 465 l 2049 471 l 2066 480 l 2087 490 l
 2110 502 l 2133 514 l 2155 526 l 2176 538 l 2194 549 l
 2211 560 l 2227 571 l 2241 582 l 2255 594 l 2268 606 l
 2278 615 l 2287 625 l 2297 635 l 2306 646 l 2315 658 l
 2324 670 l 2332 683 l 2339 697 l 2346 711 l 2353 726 l
 2358 742 l 2362 758 l 2365 774 l 2367 791 l 2368 807 l
 2367 824 l 2365 841 l 2361 858 l 2356 875 l 2350 892 l
 2342 909 l 2333 927 l 2323 942 l 2313 957 l 2301 973 l
 2287 989 l 2273 1005 l 2257 1022 l 2239 1039 l 2220 1057 l
 2200 1075 l 2179 1093 l 2156 1112 l 2132 1130 l 2107 1149 l
 2082 1167 l 2055 1185 l 2028 1203 l 2001 1221 l 1973 1238 l
 1946 1254 l 1918 1270 l 1890 1285 l 1862 1300 l 1834 1314 l
 1806 1327 l 1779 1340 l 1751 1353 l 1725 1364 l 1698 1374 l
 1671 1384 l 1644 1395 l 1615 1404 l 1585 1414 l 1553 1424 l
 1520 1434 l 1485 1444 l 1448 1454 l 1408 1464 l 1367 1475 l
 1323 1485 l 1278 1496 l 1232 1507 l 1186 1517 l 1140 1528 l
 1096 1538 l 1054 1547 l 1016 1555 l 983 1562 l 955 1568 l
 934 1573 l 918 1576 l 908 1578 l 902 1579 l 900 1580 l gs col0 s gr 
% Polyline
n 885 1570 m 881 1568 l 874 1565 l 861 1559 l 844 1550 l 823 1540 l
 800 1528 l 777 1516 l 755 1504 l 734 1492 l 716 1481 l
 699 1470 l 683 1459 l 669 1448 l 655 1436 l 642 1424 l
 632 1415 l 623 1405 l 613 1395 l 604 1384 l 595 1372 l
 586 1360 l 578 1347 l 571 1333 l 564 1319 l 557 1304 l
 552 1288 l 548 1272 l 545 1256 l 543 1239 l 542 1223 l
 543 1206 l 545 1189 l 549 1172 l 554 1155 l 560 1138 l
 568 1121 l 578 1103 l 587 1088 l 597 1073 l 609 1057 l
 623 1041 l 637 1025 l 653 1008 l 671 991 l 690 973 l
 710 955 l 731 937 l 754 918 l 778 900 l 803 881 l
 828 863 l 855 845 l 882 827 l 909 809 l 937 792 l
 964 776 l 992 760 l 1020 745 l 1048 730 l 1076 716 l
 1104 703 l 1131 690 l 1159 678 l 1185 666 l 1212 656 l
 1239 646 l 1266 635 l 1295 626 l 1325 616 l 1357 606 l
 1390 596 l 1425 586 l 1462 576 l 1502 566 l 1543 555 l
 1587 545 l 1632 534 l 1678 523 l 1724 513 l 1770 502 l
 1814 492 l 1856 483 l 1894 475 l 1927 468 l 1955 462 l
 1976 457 l 1992 454 l 2002 452 l 2008 451 l 2010 450 l gs col0 s gr 
$F2psEnd
rs
end

%%EndDocument
 @endspecial 160 1968 a Fl(K)21 b Fg(=)c(1)-92 2096 y
Fl(K)k Fg(=)d(2)621 1942 y Fl(K)j Fg(=)c Ff(\000)p Fg(2)258
2021 y Fl(K)22 b Fg(=)17 b(0)347 2076 y Fl(K)k Fg(=)d
Ff(\000)p Fg(1)91 1851 y Fm(h)685 2064 y(~)-32 b(e)721
2072 y Fl(y)762 2160 y Fm(~)f(e)797 2168 y Fl(x)480 2187
y Fm(u)p Fk(\()p Fm(y)r Fk(\))97 2190 y(0)209 1838 y
Fm(U)p 931 2368 V 1095 1825 a Fj(@)t(~)-41 b(u)p 1095
1862 97 4 v 1104 1938 a(@)5 b(t)1224 1881 y Fn(=)1305
1863 y Fj(~)1312 1881 y Fn(0)993 2088 y Fj(@)t(~)-41
b(u)p 993 2125 V 993 2201 a(@)5 b(x)1122 2145 y Fn(=)1219
2088 y Fj(@)t(~)-41 b(u)p 1219 2125 V 1222 2201 a(@)5
b(z)1349 2145 y Fn(=)1430 2127 y Fj(~)1436 2145 y Fn(0)p
1503 2368 4 811 v 1722 1706 a Fj(dp)p 1719 1743 91 4
v 1719 1819 a(dx)1843 1762 y Fn(=)22 b Fj(C)1995 1728
y Fi(te)2139 1762 y Fn(et)82 b Fj(~)-41 b(u)23 b Fn(=)g
Fj(u)p Fn(\()p Fj(y)s Fn(\))11 b Fj(~)-39 b(e)2659 1774
y Fi(x)1555 2006 y Fn(a)n(v)n(ec)81 b Fj(u)p Fn(\()p
Fj(y)s Fn(\))23 b(=)g Fj(U)2138 1914 y Fe(h)2190 1950
y Fj(y)p 2187 1987 48 4 v 2187 2063 a(h)2264 2006 y Fh(\000)18
b Fj(K)2435 1950 y(y)p 2433 1987 V 2433 2063 a(h)2505
1914 y Fe(\020)2554 2006 y Fn(1)g Fh(\000)2709 1950 y
Fj(y)p 2707 1987 V 2707 2063 a(h)2765 1914 y Fe(\021i)1882
2245 y Fn(o)r(\022)-44 b(u)82 b Fj(K)29 b Fn(=)2285 2189
y Fj(h)2333 2159 y Fd(2)p 2249 2226 158 4 v 2249 2302
a Fn(2)p Fj(\026U)2429 2189 y(dp)p 2426 2226 91 4 v 2426
2302 a(dx)p 2902 2368 4 811 v 2954 1842 a Fn(Couette)e(plan)2954
1942 y(a)n(v)n(ec)f(gradien)n(t)g(de)i(pression)2954
2041 y(\()p Fj(@)5 b(p=@)g(x)22 b Fh(6)p Fn(=)h(0\))2954
2141 y(=)k(\\Couette-P)n(oiseuille")p 3947 2368 V -230
2371 4179 4 v -230 2388 V -232 2978 4 591 v -130 2944
a @beginspecial 0 @llx 0 @lly 126 @urx 55 @ury 1260 @rwi
@setspecial
%%BeginDocument: poiseuille-cylindrique.pstex
%!PS-Adobe-2.0 EPSF-2.0
%%Title: poiseuille-cylindrique.pstex
%%Creator: fig2dev Version 3.2 Patchlevel 1
%%CreationDate: Tue Oct  5 15:02:51 1999
%%For: brancher@hydra.ups-tlse.fr (Pierre BRANCHER,,,,)
%%Orientation: Portrait
%%BoundingBox: 0 0 126 55
%%Pages: 0
%%BeginSetup
%%EndSetup
%%Magnification: 0.7500
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
-1.0 75.0 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def
%%EndProlog

$F2psBegin
10 setmiterlimit
n -1000 2587 m -1000 -1000 l 3686 -1000 l 3686 2587 l cp clip
 0.04724 0.04724 sc
7.500 slw
% Ellipse
n 2250 1010 113 560 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 222 1013 113 560 0 360 DrawEllipse gs col0 s gr

% Polyline
n 900 450 m 900 1575 l gs col0 s gr 
% Polyline
n 230 1575 m 2255 1575 l gs col0 s gr 
% Polyline
n 225 450 m 2250 450 l gs col0 s gr 
% Polyline
gs  clippath
418 586 m 455 460 l 493 586 l 493 445 l 418 445 l cp
clip
n 455 1015 m 455 460 l gs col0 s gr gr

% arrowhead
n 418 586 m 455 460 l 493 586 l 455 565 l 418 586 l  cp gs col7 1.00 shd ef gr  col0 s
% Polyline
gs  clippath
1683 818 m 1755 840 l 1683 863 l 1770 863 l 1770 818 l cp
clip
n 908 840 m 1583 840 l 1755 840 l gs col0 s gr gr

% arrowhead
n 1683 818 m 1755 840 l 1683 863 l 1695 840 l 1683 818 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
1398 630 m 1470 652 l 1398 675 l 1485 675 l 1485 630 l cp
clip
n 908 652 m 1358 652 l 1470 652 l gs col0 s gr gr

% arrowhead
n 1398 630 m 1470 652 l 1398 675 l 1410 652 l 1398 630 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
1803 990 m 1875 1012 l 1803 1035 l 1890 1035 l 1890 990 l cp
clip
n 908 1012 m 1808 1012 l 1875 1012 l gs col0 s gr gr

% arrowhead
n 1803 990 m 1875 1012 l 1803 1035 l 1815 1012 l 1803 990 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
1698 1170 m 1770 1192 l 1698 1215 l 1785 1215 l 1785 1170 l cp
clip
n 901 1192 m 1576 1192 l 1770 1192 l gs col0 s gr gr

% arrowhead
n 1698 1170 m 1770 1192 l 1698 1215 l 1710 1192 l 1698 1170 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
1398 1350 m 1470 1372 l 1398 1395 l 1485 1395 l 1485 1350 l cp
clip
n 908 1372 m 1358 1372 l 1470 1372 l gs col0 s gr gr

% arrowhead
n 1398 1350 m 1470 1372 l 1398 1395 l 1410 1372 l 1398 1350 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
 [60] 0 sd
gs  clippath
2558 988 m 2630 1010 l 2558 1033 l 2645 1033 l 2645 988 l cp
clip
n 35 1010 m 2630 1010 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 2558 988 m 2630 1010 l 2558 1033 l 2570 1010 l 2558 988 l  cp gs col7 1.00 shd ef gr  col0 s
% Polyline
n 907 465 m 910 466 l 916 467 l 928 470 l 945 474 l 969 480 l
 998 487 l 1032 496 l 1069 506 l 1109 516 l 1149 526 l
 1189 537 l 1228 548 l 1265 558 l 1300 568 l 1332 578 l
 1363 588 l 1391 597 l 1418 606 l 1443 615 l 1467 625 l
 1490 634 l 1512 644 l 1533 654 l 1555 664 l 1576 675 l
 1596 686 l 1617 698 l 1638 710 l 1658 723 l 1678 737 l
 1698 751 l 1717 766 l 1736 781 l 1754 796 l 1771 812 l
 1786 828 l 1801 844 l 1815 861 l 1827 877 l 1838 893 l
 1848 909 l 1856 925 l 1862 941 l 1868 956 l 1871 972 l
 1874 987 l 1875 1002 l 1874 1017 l 1873 1033 l 1869 1048 l
 1865 1064 l 1859 1080 l 1851 1097 l 1842 1113 l 1832 1130 l
 1820 1147 l 1807 1164 l 1793 1181 l 1777 1198 l 1760 1215 l
 1743 1231 l 1725 1248 l 1706 1263 l 1686 1278 l 1666 1293 l
 1646 1307 l 1625 1320 l 1604 1333 l 1583 1345 l 1562 1356 l
 1541 1367 l 1521 1377 l 1500 1387 l 1479 1396 l 1457 1405 l
 1433 1414 l 1409 1423 l 1382 1432 l 1354 1442 l 1324 1451 l
 1293 1461 l 1259 1471 l 1223 1481 l 1186 1491 l 1147 1502 l
 1109 1512 l 1070 1522 l 1034 1531 l 1000 1540 l 970 1548 l
 944 1554 l 924 1559 l 909 1563 l 900 1565 l 894 1566 l
 892 1567 l gs col0 s gr 
% Polyline
0.000 slw
n 260 545 m 330 545 l 345 635 l 280 665 l 290 780 l 375 800 l
 375 910 l 295 935 l 295 1060 l 380 1110 l 370 1230 l
 295 1220 l 270 1335 l 360 1420 l 320 1495 l 240 1465 l
 cp gs col7 1.00 shd ef gr 
$F2psEnd
rs

%%EndDocument
 @endspecial 67 2640 a Fm(R)493 2571 y(u)p Fk(\()p Fm(r)r
Fk(\))821 2679 y Fm(x)p 931 2978 V 1095 2545 a Fj(@)t(~)-41
b(u)p 1095 2582 97 4 v 1104 2658 a(@)5 b(t)1224 2601
y Fn(=)1305 2583 y Fj(~)1312 2601 y Fn(0)993 2809 y Fj(@)t(~)-41
b(u)p 993 2846 V 993 2922 a(@)5 b(x)1122 2865 y Fn(=)1219
2809 y Fj(@)t(~)-41 b(u)p 1219 2846 V 1222 2922 a(@)5
b(\022)1349 2865 y Fn(=)1430 2847 y Fj(~)1436 2865 y
Fn(0)p 1503 2978 4 591 v 1724 2537 a Fj(dp)p 1721 2574
91 4 v 1721 2650 a(dx)1845 2593 y Fn(=)22 b Fj(C)1997
2559 y Fi(te)2141 2593 y Fn(et)82 b Fj(~)-41 b(u)23 b
Fn(=)g Fj(u)p Fn(\()p Fj(r)r Fn(\))11 b Fj(~)-39 b(e)2656
2605 y Fi(x)1626 2855 y Fn(a)n(v)n(ec)82 b Fj(u)p Fn(\()p
Fj(r)r Fn(\))24 b(=)e Fh(\000)2226 2799 y Fn(1)p 2201
2836 92 4 v 2201 2912 a(4)p Fj(\026)2315 2799 y(dp)p
2312 2836 91 4 v 2312 2912 a(dx)2427 2788 y Fe(\000)2465
2855 y Fj(R)2529 2821 y Fd(2)2584 2855 y Fh(\000)c Fj(r)2706
2821 y Fd(2)2744 2788 y Fe(\001)p 2902 2978 4 591 v 2954
2704 a Fn(P)n(oiseuille)26 b(cylindrique)p 3947 2978
V -230 2981 4179 4 v -230 2998 V -232 3864 4 867 v -130
3800 a @beginspecial 0 @llx 0 @lly 98 @urx 81 @ury 980
@rwi @setspecial
%%BeginDocument: couette-taylor.pstex
%!PS-Adobe-2.0 EPSF-2.0
%%Title: couette-taylor.pstex
%%Creator: fig2dev Version 3.2 Patchlevel 1
%%CreationDate: Tue Oct  5 15:13:32 1999
%%For: brancher@hydra.ups-tlse.fr (Pierre BRANCHER,,,,)
%%Orientation: Portrait
%%BoundingBox: 0 0 98 81
%%Pages: 0
%%BeginSetup
%%EndSetup
%%Magnification: 0.7000
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
-3.0 90.0 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def
%%EndProlog

$F2psBegin
10 setmiterlimit
n -1000 3036 m -1000 -1000 l 3273 -1000 l 3273 3036 l cp clip
 0.04409 0.04409 sc
7.500 slw
% Ellipse
n 1125 1127 450 450 0 360 DrawEllipse gs col7 0.90 shd ef gr gs col0 s gr

% Arc
gs  clippath
984 1431 m 1121 1485 l 974 1491 l 1131 1517 l 1141 1458 l cp
clip
n 1104.7 1130.7 354.7 -90.4 87.4 arcn
gs col0 s gr
 gr

% arrowhead
n 984 1431 m 1121 1485 l 974 1491 l 1003 1465 l 984 1431 l  cp gs 0.00 setgray ef gr  col0 s
% Arc
gs  clippath
163 984 m 120 1125 l 104 979 l 89 1137 l 148 1143 l cp
clip
n 1203.5 1151.9 1083.8 -123.4 -178.6 arcn
gs col0 s gr
 gr

% arrowhead
n 163 984 m 120 1125 l 104 979 l 131 1006 l 163 984 l  cp gs 0.00 setgray ef gr  col0 s
% Arc
gs n 1200.2 1096.8 175.2 -72.1 7.3 arc
gs col0 s gr
 gr

% Ellipse
n 1125 1129 900 900 0 360 DrawEllipse gs col0 s gr

% Polyline
gs  clippath
1744 639 m 1767 567 l 1789 639 l 1790 552 l 1745 552 l cp
clip
n 1766 1125 m 1767 567 l gs col0 s gr gr

% arrowhead
n 1744 639 m 1767 567 l 1789 639 l 1767 627 l 1744 639 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
1999 469 m 2021 397 l 2044 469 l 2044 382 l 1999 382 l cp
clip
n 2021 1132 m 2021 397 l gs col0 s gr gr

% arrowhead
n 1999 469 m 2021 397 l 2044 469 l 2021 457 l 1999 469 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
1909 534 m 1932 462 l 1954 534 l 1955 447 l 1910 447 l cp
clip
n 1931 1132 m 1932 462 l gs col0 s gr gr

% arrowhead
n 1909 534 m 1932 462 l 1954 534 l 1932 522 l 1909 534 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
1823 597 m 1845 525 l 1868 597 l 1868 510 l 1823 510 l cp
clip
n 1845 1125 m 1845 525 l gs col0 s gr gr

% arrowhead
n 1823 597 m 1845 525 l 1868 597 l 1845 585 l 1823 597 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
1553 751 m 1575 679 l 1598 751 l 1598 664 l 1553 664 l cp
clip
n 1575 1129 m 1575 679 l gs col0 s gr gr

% arrowhead
n 1553 751 m 1575 679 l 1598 751 l 1575 739 l 1553 751 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
1654 690 m 1677 618 l 1699 690 l 1700 603 l 1655 603 l cp
clip
n 1676 1132 m 1677 618 l gs col0 s gr gr

% arrowhead
n 1654 690 m 1677 618 l 1699 690 l 1677 678 l 1654 690 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
2124 1099 m 2250 1129 l 2124 1159 l 2265 1159 l 2265 1099 l cp
clip
n 1129 1129 m 2250 1129 l gs col0 s gr gr

% arrowhead
n 2124 1099 m 2250 1129 l 2124 1159 l 2145 1129 l 2124 1099 l  cp gs col7 1.00 shd ef gr  col0 s
% Polyline
gs  clippath
1844 1466 m 1924 1541 l 1817 1520 l 1924 1575 l 1951 1521 l cp
clip
n 1136 1136 m 1924 1541 l gs col0 s gr gr

% arrowhead
n 1844 1466 m 1924 1541 l 1817 1520 l  col0 s
% Polyline
gs  clippath
1346 1396 m 1380 1500 l 1297 1429 l 1363 1529 l 1413 1496 l cp
clip
n 1136 1136 m 1380 1500 l gs col0 s gr gr

% arrowhead
n 1346 1396 m 1380 1500 l 1297 1429 l  col0 s
% Polyline
n 1575 680 m 2025 400 l gs col0 s gr 
% Polyline
 [60] 0 sd
n 1134 1134 m 1536 447 l gs col0 s gr  [] 0 sd
% Polyline
gs  clippath
1507 459 m 1564 409 l 1546 482 l 1591 408 l 1553 385 l cp
clip
n 1411 661 m 1564 409 l gs col0 s gr gr

% arrowhead
n 1507 459 m 1564 409 l 1546 482 l 1533 460 l 1507 459 l  cp gs col7 1.00 shd ef gr  col0 s
% Polyline
gs  clippath
1209 573 m 1158 517 l 1232 534 l 1156 490 l 1134 529 l cp
clip
n 1410 664 m 1158 517 l gs col0 s gr gr

% arrowhead
n 1209 573 m 1158 517 l 1232 534 l 1210 547 l 1209 573 l  cp gs col7 1.00 shd ef gr  col0 s
$F2psEnd
rs

%%EndDocument
 @endspecial 204 3455 a Fi(O)611 3440 y Fl(r)337 3649
y(R)383 3659 y Fc(1)551 3673 y Fl(R)597 3683 y Fc(2)148
3531 y Fg(\012)191 3541 y Fc(1)-130 3218 y Fg(\012)-87
3228 y Fc(2)351 3423 y Fl(\022)423 3171 y(~)-30 b(e)454
3179 y Fb(r)247 3209 y Fl(~)g(e)278 3221 y Fb(\022)p
931 3864 V 1095 3178 a Fj(@)t(~)-41 b(u)p 1095 3216 97
4 v 1104 3292 a(@)5 b(t)1224 3235 y Fn(=)1305 3217 y
Fj(~)1312 3235 y Fn(0)993 3442 y Fj(@)t(~)-41 b(u)p 993
3479 V 993 3555 a(@)5 b(x)1122 3498 y Fn(=)1219 3442
y Fj(@)t(~)-41 b(u)p 1219 3479 V 1222 3555 a(@)5 b(\022)1349
3498 y Fn(=)1430 3481 y Fj(~)1436 3498 y Fn(0)1098 3671
y Fj(@)g(p)p 1095 3708 V 1095 3784 a(@)g(x)1224 3727
y Fn(=)22 b(0)p 1503 3864 4 867 v 1578 3202 a Fj(~)-41
b(u)22 b Fn(=)h Fj(v)s Fn(\()p Fj(r)r Fn(\))m Fj(~)-39
b(e)1922 3214 y Fi(\022)2044 3202 y Fn(a)n(v)n(ec)81
b Fj(v)s Fn(\()p Fj(r)r Fn(\))25 b(=)d Fj(Ar)g Fn(+)2753
3146 y Fj(B)p 2753 3183 68 4 v 2767 3259 a(r)1774 3474
y Fn(o)r(\022)-44 b(u)82 b Fj(A)24 b Fn(=)2127 3418 y(\012)2187
3430 y Fd(2)2224 3418 y Fj(R)2288 3388 y Fd(2)2287 3439
y(2)2344 3418 y Fh(\000)18 b Fn(\012)2487 3430 y Fd(1)2524
3418 y Fj(R)2588 3388 y Fd(2)2587 3439 y(1)p 2127 3455
498 4 v 2224 3531 a Fj(R)2288 3502 y Fd(2)2287 3553 y(2)2344
3531 y Fh(\000)g Fj(R)2491 3502 y Fd(2)2490 3553 y(1)1741
3735 y Fn(et)83 b Fj(B)28 b Fn(=)2081 3679 y(\()q(\012)2174
3691 y Fd(2)2229 3679 y Fh(\000)18 b Fn(\012)2372 3691
y Fd(1)2409 3679 y Fn(\))d Fj(R)2520 3649 y Fd(2)2519
3700 y(1)2556 3679 y Fj(R)2620 3649 y Fd(2)2619 3700
y(2)p 2081 3716 577 4 v 2218 3792 a Fj(R)2282 3763 y
Fd(2)2281 3814 y(2)2337 3792 y Fh(\000)j Fj(R)2484 3763
y Fd(2)2483 3814 y(1)p 2902 3864 4 867 v 2954 3402 a
Fn(Couette)27 b(cylindrique)2954 3502 y(=)g(\\Couette-T)-7
b(a)n(ylor")p 3947 3864 V -230 3867 4179 4 v -230 3884
V -232 4566 4 683 v -130 4536 a @beginspecial 0 @llx
0 @lly 89 @urx 67 @ury 890 @rwi @setspecial
%%BeginDocument: film-tombant.pstex
%!PS-Adobe-2.0 EPSF-2.0
%%Title: film-tombant.pstex
%%Creator: fig2dev Version 3.2 Patchlevel 1
%%CreationDate: Tue Oct  5 15:01:16 1999
%%For: brancher@hydra.ups-tlse.fr (Pierre BRANCHER,,,,)
%%Orientation: Portrait
%%BoundingBox: 0 0 89 67
%%Pages: 0
%%BeginSetup
%%EndSetup
%%Magnification: 0.7500
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
-8.0 72.0 translate
1 -1 scale
.9 .9 scale % to make patterns same scale as in xfig

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index show		% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proe char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% right45
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 32 true [ 32 0 0 -32 0 32 ]
	{<010101010202020204040404080808081010101020202020
	404040408080808001010101020202020404040408080808
	101010102020202040404040808080800101010102020202
	040404040808080810101010202020204040404080808080
	010101010202020204040404080808081010101020202020
	4040404080808080>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P5 exch def
1.1111 1.1111 scale %restore scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def
%%EndProlog

$F2psBegin
10 setmiterlimit
n -1000 2522 m -1000 -1000 l 3049 -1000 l 3049 2522 l cp clip
 0.04724 0.04724 sc
% Arc
7.500 slw
gs n 777.7 1264.2 216.4 -140.0 156.7 arcn
gs col0 s gr
 gr

% Polyline
n 225 905 m 1400 1350 l 1385 1415 l 204 969 l cp gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P5 [16 0 0 -16 13.60 60.33] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
gs  clippath
427 236 m 505 130 l 497 261 l 545 129 l 475 103 l cp
clip
n 200 975 m 505 130 l gs col0 s gr gr

% arrowhead
n 427 236 m 505 130 l 497 261 l 469 229 l 427 236 l  cp gs col7 1.00 shd ef gr  col0 s
% Polyline
n 405 449 m 1835 975 l gs col0 s gr 
% Polyline
gs  clippath
1763 1434 m 1870 1510 l 1739 1504 l 1872 1550 l 1896 1479 l cp
clip
n 1405 1350 m 1870 1510 l gs col0 s gr gr

% arrowhead
n 1763 1434 m 1870 1510 l 1739 1504 l 1771 1476 l 1763 1434 l  cp gs col7 1.00 shd ef gr  col0 s
% Polyline
n 800 1115 m 965 655 l gs col0 s gr 
% Polyline
30.000 slw
gs  clippath
1380 591 m 1350 651 l 1320 591 l 1320 730 l 1380 730 l cp
clip
n 1350 240 m 1350 685 l gs col0 s gr gr

% arrowhead
n 1380 591 m 1350 651 l 1320 591 l 1350 591 l 1380 591 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
7.500 slw
n 225 1350 m 1190 1350 l gs col0 s gr 
% Polyline
gs  clippath
1106 1088 m 1165 1135 l 1090 1130 l 1171 1161 l 1187 1119 l cp
clip
n 845 1010 m 1165 1135 l gs col0 s gr gr

% arrowhead
n 1106 1088 m 1165 1135 l 1090 1130 l 1109 1113 l 1106 1088 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
1295 1024 m 1355 1070 l 1280 1066 l 1361 1096 l 1377 1054 l cp
clip
n 890 900 m 1355 1070 l gs col0 s gr gr

% arrowhead
n 1295 1024 m 1355 1070 l 1280 1066 l 1299 1049 l 1295 1024 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
1396 934 m 1455 980 l 1380 976 l 1461 1006 l 1477 964 l cp
clip
n 925 780 m 1455 980 l gs col0 s gr gr

% arrowhead
n 1396 934 m 1455 980 l 1380 976 l 1399 959 l 1396 934 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
1460 819 m 1520 865 l 1445 861 l 1526 891 l 1542 849 l cp
clip
n 970 660 m 1520 865 l gs col0 s gr gr

% arrowhead
n 1460 819 m 1520 865 l 1445 861 l 1464 844 l 1460 819 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
n 1515 865 m 1515 866 l 1513 870 l 1509 880 l 1503 894 l 1496 910 l
 1489 926 l 1481 940 l 1472 954 l 1463 968 l 1452 982 l
 1444 991 l 1435 1001 l 1425 1011 l 1415 1022 l 1403 1034 l
 1390 1045 l 1375 1057 l 1360 1069 l 1344 1080 l 1327 1091 l
 1310 1101 l 1292 1110 l 1274 1118 l 1256 1125 l 1237 1132 l
 1218 1137 l 1202 1140 l 1186 1143 l 1168 1145 l 1149 1146 l
 1129 1146 l 1106 1146 l 1082 1146 l 1055 1144 l 1026 1142 l
 995 1140 l 963 1137 l 930 1134 l 899 1131 l 871 1128 l
 847 1125 l 828 1123 l 816 1121 l 808 1120 l 805 1120 l gs col0 s gr 
$F2psEnd
rs
end

%%EndDocument
 @endspecial -50 4433 a Fm(\013)-78 4295 y Fk(0)10 4069
y Fm(y)147 4127 y(P)192 4135 y Fl(a)364 4140 y Fm(~)-32
b(g)419 4259 y(u)p Fk(\()p Fm(y)r Fk(\))483 4475 y Fm(x)-112
4116 y(h)p 931 4566 V 1095 4087 a Fj(@)t(~)-41 b(u)p
1095 4124 97 4 v 1104 4200 a(@)5 b(t)1224 4143 y Fn(=)1305
4125 y Fj(~)1312 4143 y Fn(0)993 4351 y Fj(@)t(~)-41
b(u)p 993 4388 V 993 4464 a(@)5 b(x)1122 4407 y Fn(=)1219
4351 y Fj(@)t(~)-41 b(u)p 1219 4388 V 1222 4464 a(@)5
b(z)1349 4407 y Fn(=)1430 4389 y Fj(~)1436 4407 y Fn(0)p
1503 4566 4 683 v 2006 4081 a Fj(~)-41 b(u)23 b Fn(=)f
Fj(u)p Fn(\()p Fj(y)s Fn(\))m Fj(~)-39 b(e)2360 4093
y Fi(x)1658 4304 y Fn(a)n(v)n(ec)82 b Fj(u)p Fn(\()p
Fj(y)s Fn(\))23 b(=)2172 4248 y Fj(g)17 b Fn(sin)c Fj(\013)p
2172 4285 226 4 v 2241 4361 a Fn(2)p Fj(\027)2408 4304
y(y)s Fn(\(2)p Fj(h)k Fh(\000)h Fj(y)s Fn(\))1709 4482
y Fj(p)p Fn(\()p Fj(y)s Fn(\))23 b(=)g Fj(\032g)s Fn(\()p
Fj(h)18 b Fh(\000)g Fj(y)s Fn(\))c(cos)e Fj(\013)19 b
Fn(+)f Fj(P)2659 4494 y Fi(a)p 2902 4566 4 683 v 2954
4254 a Fn(Film)28 b(tom)n(ban)n(t)p 3947 4566 V -230
4570 4179 4 v -230 4586 V -232 5274 4 689 v -130 5240
a @beginspecial 0 @llx 0 @lly 144 @urx 67 @ury 1440 @rwi
@setspecial
%%BeginDocument: stokes-1.pstex
%!PS-Adobe-2.0 EPSF-2.0
%%Title: stokes-1.pstex
%%Creator: fig2dev Version 3.2 Patchlevel 1
%%CreationDate: Tue Oct  5 14:52:31 1999
%%For: brancher@hydra.ups-tlse.fr (Pierre BRANCHER,,,,)
%%Orientation: Portrait
%%BoundingBox: 0 0 144 67
%%Pages: 0
%%BeginSetup
%%EndSetup
%%Magnification: 0.7500
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
-10.0 81.0 translate
1 -1 scale
.9 .9 scale % to make patterns same scale as in xfig

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index show		% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proe char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% right45
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 32 true [ 32 0 0 -32 0 32 ]
	{<010101010202020204040404080808081010101020202020
	404040408080808001010101020202020404040408080808
	101010102020202040404040808080800101010102020202
	040404040808080810101010202020204040404080808080
	010101010202020204040404080808081010101020202020
	4040404080808080>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P5 exch def
1.1111 1.1111 scale %restore scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def
%%EndProlog

$F2psBegin
10 setmiterlimit
n -1000 2699 m -1000 -1000 l 4243 -1000 l 4243 2699 l cp clip
 0.04724 0.04724 sc
% Arc
7.500 slw
gs  clippath
1136 911 m 1241 836 l 1181 951 l 1273 844 l 1228 805 l cp
clip
n -278.8 -388.4 1951.7 66.0 38.9 arcn
gs col0 s gr
 gr

% arrowhead
n 1136 911 m 1241 836 l 1181 951 l 1172 915 l 1136 911 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
2515 1500 m 2605 1530 l 2515 1560 l 2620 1560 l 2620 1500 l cp
2220 1260 m 2250 1170 l 2280 1260 l 2280 1155 l 2220 1155 l cp
clip
n 2250 1170 m 2250 1530 l 2605 1530 l gs col0 s gr gr

% arrowhead
n 2220 1260 m 2250 1170 l 2280 1260 l 2250 1245 l 2220 1260 l  cp gs col7 1.00 shd ef gr  col0 s
% arrowhead
n 2515 1500 m 2605 1530 l 2515 1560 l 2530 1530 l 2515 1500 l  cp gs col7 1.00 shd ef gr  col0 s
% Polyline
n 232 1575 m 2475 1575 l 2475 1687 l 232 1687 l cp gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P5 [16 0 0 -16 15.47 105.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
gs  clippath
420 459 m 450 315 l 480 459 l 480 300 l 420 300 l cp
clip
n 450 315 m 450 1560 l gs col0 s gr gr

% arrowhead
n 420 459 m 450 315 l 480 459 l 450 435 l 420 459 l  cp gs col7 1.00 shd ef gr  col0 s
% Polyline
n 517 360 m 517 362 l 519 367 l 521 377 l 524 391 l 529 411 l
 535 437 l 542 468 l 551 504 l 561 545 l 572 588 l
 584 634 l 597 681 l 610 727 l 623 773 l 637 818 l
 651 861 l 665 902 l 679 940 l 692 976 l 707 1010 l
 721 1041 l 735 1071 l 750 1098 l 766 1123 l 782 1147 l
 798 1169 l 816 1190 l 834 1210 l 853 1229 l 873 1247 l
 894 1264 l 916 1280 l 940 1296 l 965 1312 l 993 1327 l
 1022 1341 l 1054 1355 l 1088 1370 l 1124 1384 l 1163 1398 l
 1205 1412 l 1249 1426 l 1296 1440 l 1345 1454 l 1395 1468 l
 1446 1482 l 1497 1495 l 1547 1508 l 1594 1520 l 1638 1531 l
 1678 1540 l 1712 1548 l 1740 1554 l 1762 1559 l 1778 1563 l
 1788 1565 l 1794 1566 l 1796 1567 l gs col0 s gr 
% Polyline
n 727 318 m 728 320 l 729 325 l 733 334 l 737 348 l 744 367 l
 753 392 l 763 421 l 775 455 l 788 492 l 803 531 l
 818 572 l 834 613 l 850 654 l 866 693 l 881 731 l
 897 767 l 912 801 l 927 834 l 942 864 l 957 892 l
 972 919 l 987 944 l 1002 968 l 1017 990 l 1033 1012 l
 1050 1034 l 1067 1054 l 1085 1074 l 1104 1094 l 1123 1114 l
 1144 1134 l 1166 1154 l 1190 1174 l 1216 1194 l 1243 1215 l
 1273 1237 l 1304 1260 l 1338 1283 l 1375 1307 l 1413 1333 l
 1453 1358 l 1494 1384 l 1536 1410 l 1577 1436 l 1617 1460 l
 1655 1483 l 1690 1504 l 1720 1522 l 1745 1537 l 1765 1549 l
 1779 1557 l 1789 1563 l 1794 1566 l 1796 1567 l gs col0 s gr 
% Polyline
n 484 709 m 484 712 l 484 719 l 484 731 l 484 749 l 484 774 l
 484 806 l 485 843 l 487 885 l 489 929 l 491 976 l
 495 1023 l 499 1069 l 504 1113 l 510 1155 l 518 1194 l
 526 1230 l 535 1264 l 546 1294 l 558 1322 l 571 1347 l
 586 1370 l 602 1390 l 621 1409 l 641 1426 l 663 1442 l
 683 1454 l 704 1465 l 726 1475 l 751 1485 l 777 1493 l
 805 1502 l 836 1509 l 870 1516 l 906 1522 l 945 1528 l
 987 1533 l 1032 1538 l 1081 1542 l 1132 1546 l 1185 1549 l
 1242 1553 l 1299 1555 l 1358 1558 l 1417 1560 l 1475 1562 l
 1531 1563 l 1584 1564 l 1632 1565 l 1675 1566 l 1712 1566 l
 1742 1567 l 1765 1567 l 1781 1567 l 1792 1567 l 1797 1567 l
 1800 1567 l gs col0 s gr 
% Polyline
75.000 slw
gs  clippath
1577 1586 m 1697 1631 l 1577 1676 l 1894 1676 l 1894 1586 l cp
clip
n 451 1631 m 1804 1631 l gs col0 s gr gr

% arrowhead
n 1577 1586 m 1697 1631 l 1577 1676 l 1577 1631 l 1577 1586 l  cp gs 0.00 setgray ef gr  col0 s
$F2psEnd
rs
end

%%EndDocument
 @endspecial 684 5032 a Fm(~)-32 b(e)720 5040 y Fl(y)761
5128 y Fm(~)g(e)797 5136 y Fl(x)281 4956 y Fm(t)491 5161
y(U)-87 5171 y Fk(0)-99 4767 y Fm(y)p 931 5274 V 993
4793 a Fj(@)t(~)-41 b(u)p 993 4830 97 4 v 993 4906 a(@)5
b(x)1122 4849 y Fn(=)1219 4793 y Fj(@)t(~)-41 b(u)p 1219
4830 V 1222 4906 a(@)5 b(z)1349 4849 y Fn(=)1430 4831
y Fj(~)1436 4849 y Fn(0)1098 5055 y Fj(@)g(p)p 1095 5092
V 1095 5168 a(@)g(x)1224 5111 y Fn(=)22 b(0)p 1503 5274
4 689 v 1973 4769 a Fj(~)-41 b(u)22 b Fn(=)h Fj(u)p Fn(\()p
Fj(y)s(;)14 b(t)p Fn(\))m Fj(~)-39 b(e)2394 4781 y Fi(x)1555
5001 y Fn(a)n(v)n(ec)81 b Fj(u)p Fn(\()p Fj(y)s(;)14
b(t)p Fn(\))23 b(=)g Fj(U)2205 4884 y Fe(\024)2249 5001
y Fn(1)18 b Fh(\000)g Fn(erf)2501 4884 y Fe(\022)2650
4945 y Fj(y)p 2572 4982 201 4 v 2572 5066 a Fn(2)2614
4999 y Fh(p)p 2682 4999 91 4 v 2682 5066 a Fj(\027)h(t)2782
4884 y Fe(\023)q(\025)2065 5208 y Fj(p)k Fn(=)g Fj(C)2283
5174 y Fi(te)p 2902 5274 4 689 v 2954 4909 a Fn(Premier)j(probl)n(\022)
-39 b(eme)2954 5009 y(de)27 b(Stok)n(es)p 3947 5274 V
-230 5278 4179 4 v -230 5294 V -232 6048 4 755 v -130
5962 a @beginspecial 0 @llx 0 @lly 144 @urx 63 @ury 1440
@rwi @setspecial
%%BeginDocument: stokes-2.pstex
%!PS-Adobe-2.0 EPSF-2.0
%%Title: stokes-2.pstex
%%Creator: fig2dev Version 3.2 Patchlevel 1
%%CreationDate: Tue Oct  5 14:58:10 1999
%%For: brancher@hydra.ups-tlse.fr (Pierre BRANCHER,,,,)
%%Orientation: Portrait
%%BoundingBox: 0 0 144 63
%%Pages: 0
%%BeginSetup
%%EndSetup
%%Magnification: 0.7500
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
-10.0 89.0 translate
1 -1 scale
.9 .9 scale % to make patterns same scale as in xfig

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index show		% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proe char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% right45
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 32 true [ 32 0 0 -32 0 32 ]
	{<010101010202020204040404080808081010101020202020
	404040408080808001010101020202020404040408080808
	101010102020202040404040808080800101010102020202
	040404040808080810101010202020204040404080808080
	010101010202020204040404080808081010101020202020
	4040404080808080>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P5 exch def
1.1111 1.1111 scale %restore scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def
%%EndProlog

$F2psBegin
10 setmiterlimit
n -1000 2870 m -1000 -1000 l 4243 -1000 l 4243 2870 l cp clip
 0.04724 0.04724 sc
% Polyline
7.500 slw
gs  clippath
2515 1500 m 2605 1530 l 2515 1560 l 2620 1560 l 2620 1500 l cp
2220 1260 m 2250 1170 l 2280 1260 l 2280 1155 l 2220 1155 l cp
clip
n 2250 1170 m 2250 1530 l 2605 1530 l gs col0 s gr gr

% arrowhead
n 2220 1260 m 2250 1170 l 2280 1260 l 2250 1245 l 2220 1260 l  cp gs col7 1.00 shd ef gr  col0 s
% arrowhead
n 2515 1500 m 2605 1530 l 2515 1560 l 2530 1530 l 2515 1500 l  cp gs col7 1.00 shd ef gr  col0 s
% Polyline
n 1350 621 m 1350 1746 l gs col0 s gr 
% Polyline
n 232 1746 m 2475 1746 l 2475 1858 l 232 1858 l cp gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P5 [16 0 0 -16 15.47 116.40] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
gs  clippath
1966 1655 m 2020 1670 l 1966 1685 l 2035 1685 l 2035 1655 l cp
clip
n 1356 1671 m 2020 1670 l gs col0 s gr gr

% arrowhead
n 1966 1655 m 2020 1670 l 1966 1685 l 1975 1670 l 1966 1655 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
1533 750 m 1587 765 l 1533 780 l 1602 780 l 1602 750 l cp
clip
n 1350 765 m 1587 765 l gs col0 s gr gr

% arrowhead
n 1533 750 m 1587 765 l 1533 780 l 1542 765 l 1533 750 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
1069 1125 m 1015 1110 l 1069 1095 l 1000 1095 l 1000 1125 l cp
clip
n 1345 1110 m 1015 1110 l gs col0 s gr gr

% arrowhead
n 1069 1125 m 1015 1110 l 1069 1095 l 1060 1110 l 1069 1125 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
1009 1215 m 955 1200 l 1009 1185 l 940 1185 l 940 1215 l cp
clip
n 1348 1200 m 955 1200 l gs col0 s gr gr

% arrowhead
n 1009 1215 m 955 1200 l 1009 1185 l 1000 1200 l 1009 1215 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
1107 1325 m 1053 1310 l 1107 1295 l 1038 1295 l 1038 1325 l cp
clip
n 1344 1310 m 1053 1310 l gs col0 s gr gr

% arrowhead
n 1107 1325 m 1053 1310 l 1107 1295 l 1098 1310 l 1107 1325 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
1701 1570 m 1755 1585 l 1701 1600 l 1770 1600 l 1770 1570 l cp
clip
n 1351 1585 m 1755 1585 l gs col0 s gr gr

% arrowhead
n 1701 1570 m 1755 1585 l 1701 1600 l 1710 1585 l 1701 1570 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
 [60] 0 sd
n 2366 1750 m 2364 1748 l 2359 1745 l 2351 1739 l 2338 1729 l 2320 1717 l
 2298 1700 l 2272 1681 l 2243 1659 l 2211 1635 l 2178 1609 l
 2145 1583 l 2112 1558 l 2080 1532 l 2050 1507 l 2021 1483 l
 1994 1460 l 1969 1438 l 1946 1416 l 1924 1396 l 1904 1375 l
 1885 1355 l 1868 1336 l 1851 1316 l 1835 1296 l 1820 1276 l
 1805 1255 l 1791 1233 l 1777 1211 l 1764 1188 l 1750 1163 l
 1737 1137 l 1723 1109 l 1709 1080 l 1695 1048 l 1680 1014 l
 1665 977 l 1650 939 l 1634 899 l 1618 858 l 1603 816 l
 1588 775 l 1573 736 l 1560 699 l 1548 667 l 1539 640 l
 1531 618 l 1526 602 l 1522 591 l 1520 586 l 1519 583 l gs col0 s gr  [] 0 sd
% Polyline
 [60] 0 sd
n 338 1750 m 340 1748 l 345 1745 l 353 1739 l 366 1729 l 384 1717 l
 406 1700 l 432 1681 l 461 1659 l 493 1635 l 526 1609 l
 559 1583 l 592 1558 l 624 1532 l 654 1507 l 683 1483 l
 710 1460 l 735 1438 l 758 1416 l 780 1396 l 800 1375 l
 819 1355 l 836 1336 l 853 1316 l 869 1296 l 884 1276 l
 899 1255 l 913 1233 l 927 1211 l 940 1188 l 954 1163 l
 967 1137 l 981 1109 l 995 1080 l 1009 1048 l 1024 1014 l
 1039 977 l 1054 939 l 1070 899 l 1086 858 l 1101 816 l
 1116 775 l 1131 736 l 1144 699 l 1156 667 l 1165 640 l
 1173 618 l 1178 602 l 1182 591 l 1184 586 l 1185 583 l gs col0 s gr  [] 0 sd
% Polyline
n 2350 1745 m 2348 1744 l 2343 1743 l 2334 1740 l 2319 1736 l 2299 1731 l
 2272 1723 l 2239 1713 l 2199 1702 l 2152 1689 l 2100 1673 l
 2043 1657 l 1982 1639 l 1918 1620 l 1852 1600 l 1785 1580 l
 1717 1560 l 1651 1539 l 1586 1519 l 1524 1499 l 1464 1480 l
 1407 1461 l 1353 1443 l 1303 1425 l 1256 1408 l 1213 1392 l
 1174 1377 l 1138 1362 l 1105 1347 l 1076 1334 l 1050 1320 l
 1027 1307 l 1007 1295 l 990 1283 l 975 1271 l 963 1259 l
 954 1247 l 947 1236 l 940 1219 l 938 1202 l 940 1185 l
 946 1169 l 955 1152 l 969 1134 l 986 1117 l 1006 1100 l
 1029 1082 l 1055 1065 l 1083 1048 l 1113 1031 l 1145 1014 l
 1178 997 l 1212 981 l 1246 965 l 1280 949 l 1314 934 l
 1347 920 l 1378 906 l 1408 893 l 1437 881 l 1463 869 l
 1487 857 l 1509 846 l 1528 836 l 1545 826 l 1559 816 l
 1571 806 l 1580 797 l 1585 788 l 1589 779 l 1589 770 l
 1587 760 l 1583 751 l 1576 741 l 1566 731 l 1554 721 l
 1541 710 l 1525 700 l 1509 690 l 1491 680 l 1474 670 l
 1457 662 l 1442 654 l 1428 648 l 1418 643 l 1410 639 l
 1404 637 l 1401 636 l 1400 635 l gs col0 s gr 
% Polyline
75.000 slw
gs  clippath
1902 1757 m 2022 1802 l 1902 1847 l 2219 1847 l 2219 1757 l cp
clip
n 1347 1803 m 2129 1802 l gs col0 s gr gr

% arrowhead
n 1902 1757 m 2022 1802 l 1902 1847 l 1902 1802 l 1902 1757 l  cp gs 0.00 setgray ef gr  col0 s
$F2psEnd
rs
end

%%EndDocument
 @endspecial 684 5686 a Fm(~)-32 b(e)720 5694 y Fl(y)761
5783 y Fm(~)g(e)797 5791 y Fl(x)53 5892 y(U)16 b Fg(cos)q(\()p
Fl(!)r(t)p Fg(\))p 931 6048 V 993 5534 a Fj(@)t(~)-41
b(u)p 993 5571 97 4 v 993 5647 a(@)5 b(x)1122 5590 y
Fn(=)1219 5534 y Fj(@)t(~)-41 b(u)p 1219 5571 V 1222
5647 a(@)5 b(z)1349 5590 y Fn(=)1430 5572 y Fj(~)1436
5590 y Fn(0)1098 5796 y Fj(@)g(p)p 1095 5833 V 1095 5909
a(@)g(x)1224 5852 y Fn(=)22 b(0)p 1503 6048 4 755 v 1973
5477 a Fj(~)-41 b(u)22 b Fn(=)h Fj(u)p Fn(\()p Fj(y)s(;)14
b(t)p Fn(\))m Fj(~)-39 b(e)2394 5489 y Fi(x)1568 5681
y Fn(a)n(v)n(ec)82 b Fj(u)p Fn(\()p Fj(y)s(;)14 b(t)p
Fn(\))22 b(=)h Fj(U)9 b(e)2244 5647 y Fa(\000)p Fi(y)r(=\016)2415
5681 y Fn(cos)o(\()p Fj(!)s(t)19 b Fh(\000)2755 5625
y Fj(y)p 2755 5662 44 4 v 2757 5738 a(\016)2808 5681
y Fn(\))1691 5933 y(o)r(\022)-44 b(u)83 b Fj(\016)26
b Fn(=)2013 5802 y Fe(r)p 2096 5802 108 4 v 2106 5877
a Fn(2)p Fj(\027)p 2106 5914 88 4 v 2122 5990 a(!)2287
5933 y Fn(et)83 b Fj(p)23 b Fn(=)f Fj(C)2656 5899 y Fi(te)p
2902 6048 4 755 v 2954 5650 a Fn(Second)27 b(probl)n(\022)-39
b(eme)2954 5750 y(de)27 b(Stok)n(es)p 3947 6048 V -230
6052 4179 4 v eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
